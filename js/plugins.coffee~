# Avoid `console` errors in browsers that lack a console.
do ->
  method = undefined

  noop = ->

  methods = [
    'assert'
    'clear'
    'count'
    'debug'
    'dir'
    'dirxml'
    'error'
    'exception'
    'group'
    'groupCollapsed'
    'groupEnd'
    'info'
    'log'
    'markTimeline'
    'profile'
    'profileEnd'
    'table'
    'time'
    'timeEnd'
    'timeline'
    'timelineEnd'
    'timeStamp'
    'trace'
    'warn'
  ]
  length = methods.length
  console = window.console = window.console or {}
  while length--
    method = methods[length]
    # Only stub undefined methods.
    if !console[method]
      console[method] = noop
  return
# Place any jQuery/helper plugins in here.
debug = false
unique_id = 1
activer_copier_symbole= ""
activer_copier_contenu= {}

changementSens = { '=': '=', '<': '>', '>': '<', '≤': '≥', '≥': '≤' }
liste_des_operateurs = ['+','-']
liste_des_chiffres =   ['1','2','3','4','5','6','7','8','9','0']  
liste_des_variables =  ['x','y','z','t']
liste_des_signes =     ['=','<','>','≤','≥']
# effacer la zone de saisie 


# Class Fraction
class Fraction
  constructor: (@numerateur, @denominateur) ->
  
  irreductible: () ->
    [a, b] = [@numerateur, @denominateur]
    [a, b] = [b, a%b] until b is 0
    @denominateur /= a
    @numerateur /= a
    if @denominateur < 0 then [@numerateur , @denominateur] = [-@numerateur;-@denominateur]
    foo = new Fraction @numerateur,@denominateur

  inverse: () ->
    if @numerateur isnt 0
      [@numerateur,@denominateur]=[@denominateur,@numerateur]
      foo = new Fraction @numerateur,@denominateur
  
  oppose: () ->
    @numerateur = -@numerateur
    foo = new Fraction @numerateur,@denominateur
     
ajouter_deux_fractions = (f1,f2) ->
  if f1.denominateur isnt f2.denominateur
    n = f1.numerateur * f2.denominateur + f2.numerateur * f1.denominateur
    d = f1.denominateur * f2.denominateur
  else
    n = f1.numerateur + f2.numerateur
    d = f1.denominateur
  foo = new Fraction n, d
  
multiplier_deux_fractions = (f1,f2) ->
  n = f1.numerateur * f2.numerateur
  d = f1.denominateur * f2.denominateur
  foo = new Fraction n, d

# Evaluer value comme fraction
string_to_frac = (value) ->
  alert "string_to_frac(#{value}) starts !" if debug
  foo = value.split("/")
  switch foo.length
    when 2
      [n,d] = [parseInt(foo[0]), parseInt(foo[1])]
      if n? and d? then foo = new Fraction n,d else alert "Erreur : string_to_frac, n is #{n} and d is #{d} !"
    when 1
      n = parseInt(foo[0])
      if n? then foo = new Fraction n,1 else alert "Erreur : string_to_frac, n is #{n} !"
    else
      alert "Erreur : string_to_frac, value is #{value} !"
    
# afficher une fraction en html
frac_to_html = (fraction) ->
  if fraction.denominateur is 1
    if fraction.numerateur < 0
      html = "<span class='moins'>&minus;</span><span class='rationnel'>#{Math.abs(fraction.numerateur)}</span>"
    else
      html = "<span class='plus'>&plus;</span><span class='rationnel'>#{fraction.numerateur}</span>"
  else
    if fraction.numerateur < 0
      html = "<span class='moins'>&minus;</span><span class='fraction'><span class='top'>#{Math.abs(fraction.numerateur)}</span><span class='bottom'>#{fraction.denominateur}</span></span>"
    else
      html = "<span class='plus'>&plus;</span><span class='fraction'><span class='top'>#{fraction.numerateur}</span><span class='bottom'>#{fraction.denominateur}</span></span>"


mettre_a_jour_ce_monome = (monome)->
  try
    id = monome.parent().attr("id").split("_")[1]
    data_type = monome.attr("data-type")
    fraction = string_to_frac monome.attr( "data-value")
    html = "<span id='monome_html_#{id}' class='monome_html'>"
    html += frac_to_html fraction
    switch data_type
      when "symbol"
        symbol = monome.attr("data-symbol")
        if fraction.numerateur*fraction.denominateur in [-1,1]
          if fraction.numerateur/fraction.denominateur is 1
            monome.html( "<span class='droppable'><span class='plus'>+</span><span>#{symbol}</span></span>" )
          else
            monome.html( "<span class='droppable'><span class='moins'>&minus;</span><span>#{symbol}</span></span>" )
        else
          monome.html( "#{html}<span>#{symbol}</span></span>")                   
      when "rationnel"
        monome.html( "#{html}</span>" )
    
    $li_gauche = $( "#membreDeGauche_#{id} > li")
    if $li_gauche.length is 1 and $li_gauche.attr("data-symbol")
      if $li_gauche.attr("data-value") is "1/1" or $li_gauche.attr("data-value") is "1"
        $( "#activer_copier_#{id}" ).show()
      else
        $( "#activer_copier_#{id}" ).hide()
    else
      $( "#activer_copier_#{id}" ).hide()
  catch error
    alert "mettre_a_jour_ce_monome : #{error}"
  finally
  
  

  
# Afficher le contenu des termes de l'equation  
mettre_a_jour_les_monomes = ->
  # Rendre sortable et connectable les equations
  makeSortable = () -> 
    makeSortableSide = (Side) ->
      oppositeSide = if Side is "Gauche" then "Droite" else "Gauche"
      $("#equations_div").sortable  
      $( ".membreDe#{Side}" ).each ->
        id = $( this ).attr("id").split("_")[1]

        $( "#membreDe#{Side}_#{id} > li" ).droppable
          accept: "#membreDe#{Side}_#{id} > li"
          hover: -> $(this).css('cursor','crosshair')
          hoverClass: "ui-state-hover"
          cursor: 'crosshair'
          tolerance : "pointer"
          drop: (event, ui) ->
            ajouter_m1_a_m2(ui.draggable, $( this ) )
            mettre_a_jour_ce_monome $( this )    
        $( "#membreDe#{Side}_#{id}" ).sortable
          connectWith: "#membreDe#{oppositeSide}_#{id}",
          update : -> mettre_a_jour_les_monomes(id),
          receive : (event, ui) ->
            changer_de_membre(event, ui,id)        
    makeSortableSide("Gauche") 
    makeSortableSide("Droite")
    $("#equations_div" ).sortable()
 
  $(".equation").each ->
    id = $( this ).attr("id").split("_")[1]
    for Side in ["Gauche","Droite"]
      side = if Side is "Gauche" then "gauche" else "Droite"
  $(".monome").each ->
    mettre_a_jour_ce_monome( $( this ) )      
  makeSortable()
  
insert_monome = (side,fraction_string,symbol) ->
  try
    unique_id++
    if not symbol?
      foo = "<li id='monome_#{unique_id}' class='monome #{side}' data-value='#{fraction_string}' data-type='rationnel'></li>"
    else
      foo = "<li id='monome_#{unique_id}' class='monome #{side}' data-value='#{fraction_string}' data-type='symbol' data-symbol='#{symbol}'></li>"  
  catch error
      print "insert_monome: #{error}"
  finally 
$("#effacer_equation_string").on "click", ->  $( "#equation_string" ).val( "" ) 
    

$( "#add_equation" ).on "click", () ->
  #Obtenir le code html d'un membre d'une equation    
  membre_as_html = (membre,side,id) ->
    Side = if side is "gauche" then "Gauche" else "Droite"
    html = "<ul id='membreDe#{Side}_#{id}' class='membreDe#{Side}'>"
    for monome in membre
      m = monome.split(")")
      if m[1]
        html += insert_monome side, m[0][1..], m[1]
      else
        unique_id++
        html += insert_monome side, m[0][1..]
    html += "</ul>"    

  unique_id++
  id = unique_id
  if s = $( "#equation_string" ).val()
    if s.slice(-1) in liste_des_chiffres
      $( "#equation_string" ).val(s + ')')
    # On récupère l'equation et on enlève tous les whitespaces \s+
    s = $( "#equation_string" ).val().replace(/\s+/g, '')
    # regex digest !
    pattern_equation = /(\([\+\-]*\d+[/\d+]*\)(\w{1,}²{0,1})*)(\+(\([\+\-]*\d+[/\d+]*\)(\w{1,}²{0,1})*))*[<≤=≥>](\([\+\-]*\d+[/\d+]*\)(\w{1,}²{0,1})*)(\+(\([\+\-]*\d+[/\d+]*\)(\w{1,}²{0,1})*))*/g
    foo = s.match(pattern_equation)
    if foo[0].length is s.length
      signe = s.match(/[<≤=≥>]/g)[0]
      s = s.split(signe)
      mdg = s[0].split("+")
      mdd = s[1].split("+")   
      html =  """
              <div id='equation_#{id}' class='equation' >
                  <button id='deleteButton_#{id}' class='deleteButton' title='Supprimer cette équation'>X</button>
                  <div id='choixMonome_#{id}' class='choixMonome'></div>           
              """
      html += membre_as_html(mdg,"gauche",id)
      html += "<span id='signe_#{id}' class='signe'>#{signe}</span>"
      html += membre_as_html(mdd,"droite",id)
      html += "<p id='solution_#{id}'></p></div>"
      $( "#equations_div" ).append(html)
      mettre_a_jour_les_monomes()
    else
      alert "Vérifier que l'équation est correctement formatée"
    
    

# ---
# generated by js2coffee 2.0.4
