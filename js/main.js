// Generated by CoffeeScript 1.4.0
(function() {
  var Fraction, Monome, activer_copier_contenu, activer_copier_symbole, ajouter_membre, changementSens, debug, fracString_to_frac, generate_equation_string, get_focused_id, liste_des_chiffres, liste_des_operateurs, liste_des_signes, liste_des_variables, monomeString_to_array, monomesString_insert, multiplier_membre, obtenir_la_solution, operation_sur_equation, signes, unique_id,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  unique_id = 1;

  debug = false;

  activer_copier_symbole = "";

  activer_copier_contenu = {};

  liste_des_chiffres = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];

  liste_des_operateurs = ['+', '-'];

  signes = ['≤', '≤', '≥', '>', '<', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '='];

  liste_des_variables = ['x', 'y', 'z', 't'];

  liste_des_signes = ['=', '<', '>', '≤', '≥'];

  changementSens = {
    '=': '=',
    '<': '>',
    '>': '<',
    '≤': '≥',
    '≥': '≤'
  };

  Fraction = (function() {

    function Fraction(numerateur, denominateur) {
      this.numerateur = numerateur;
      this.denominateur = denominateur;
    }

    Fraction.prototype.irreductible = function() {
      var a, b, _ref, _ref1, _ref2, _ref3;
      _ref = [this.numerateur, this.denominateur], a = _ref[0], b = _ref[1];
      while (b !== 0) {
        _ref1 = [b, a % b], a = _ref1[0], b = _ref1[1];
      }
      _ref2 = [this.numerateur / a, this.denominateur / a], this.numerateur = _ref2[0], this.denominateur = _ref2[1];
      if (this.denominateur < 0) {
        _ref3 = [-this.numerateur, -this.denominateur], this.numerateur = _ref3[0], this.denominateur = _ref3[1];
      }
      return this;
    };

    Fraction.prototype.inverse = function() {
      var _ref;
      if (this.numerateur !== 0) {
        _ref = [this.denominateur, this.numerateur], this.numerateur = _ref[0], this.denominateur = _ref[1];
        return this;
      }
    };

    Fraction.prototype.oppose = function() {
      this.numerateur = -this.numerateur;
      return this;
    };

    Fraction.prototype.toString = function() {
      return "" + this.numerateur + "/" + this.denominateur;
    };

    Fraction.prototype.toHtml = function() {
      var html;
      if (this.denominateur === 1) {
        if (this.numerateur < 0) {
          return html = "<span class='moins'>&minus;</span><span class='rationnel'>" + (Math.abs(this.numerateur)) + "</span>";
        } else {
          return html = "<span class='plus'>&plus;</span><span class='rationnel'>" + this.numerateur + "</span>";
        }
      } else {
        if (this.numerateur < 0) {
          return html = "<span class='moins'>&minus;</span><span class='fraction'><span class='top'>" + (Math.abs(this.numerateur)) + "</span><span class='bottom'>" + this.denominateur + "</span></span>";
        } else {
          return html = "<span class='plus'>&plus;</span><span class='fraction'><span class='top'>" + this.numerateur + "</span><span class='bottom'>" + this.denominateur + "</span></span>";
        }
      }
    };

    Fraction.prototype.ajouter = function(fraction) {
      var _ref, _ref1;
      if (this.nominateur !== fraction.denominateur) {
        _ref = [this.numerateur * fraction.denominateur + fraction.numerateur * this.denominateur, this.denominateur * fraction.denominateur], this.numerateur = _ref[0], this.denominateur = _ref[1];
      } else {
        _ref1 = [this.numerateur + fraction.numerateur, this.denominateur], this.numerateur = _ref1[0], this.denominateur = _ref1[1];
      }
      return this;
    };

    Fraction.prototype.multiplier = function(fraction) {
      var _ref;
      _ref = [this.numerateur * fraction.numerateur, this.denominateur * fraction.denominateur], this.numerateur = _ref[0], this.denominateur = _ref[1];
      return this;
    };

    return Fraction;

  })();

  fracString_to_frac = function(value) {
    var d, foo, n, _ref;
    if (debug) {
      console.log("fracString_to_frac(" + value + ") starts !");
    }
    foo = value.split("/");
    switch (foo.length) {
      case 2:
        _ref = [parseInt(foo[0]), parseInt(foo[1])], n = _ref[0], d = _ref[1];
        if ((n != null) && (d != null)) {
          return foo = new Fraction(n, d);
        } else {
          return alert("Erreur : fracString_to_frac, n is " + n + " and d is " + d + " !");
        }
        break;
      case 1:
        n = parseInt(foo[0]);
        if (n != null) {
          return foo = new Fraction(n, 1);
        } else {
          return alert("Erreur : fracString_to_frac, n is " + n + " !");
        }
        break;
      default:
        return alert("Erreur : fracString_to_frac, value is " + value + " !");
    }
  };

  Monome = (function() {

    function Monome(id) {
      if (id != null) {
        this.id = "#" + id;
        this.equation_id = $(this.id).parent().attr("id").split("_")[2];
        this.side = $(this.id).hasClass("gauche") ? "gauche" : "droite";
        this.fraction = fracString_to_frac($(this.id).attr("data-value"));
        this.type = $(this.id).attr("data-type");
        this.symbol = this.type === "symbol" ? $(this.id).attr("data-symbol") : "";
      } else {
        this.id = "#monome_" + (unique_id++);
      }
    }

    Monome.prototype.irreductible = function() {
      return this.fraction.irreductible();
    };

    Monome.prototype.remove = function() {
      return $(this.id).remove();
    };

    Monome.prototype.update = function() {
      var html, _ref;
      $(this.id).attr("data-value", this.fraction.toString());
      switch (this.type) {
        case "symbol":
          if ((_ref = this.fraction.numerateur * this.fraction.denominateur) === (-1) || _ref === 1) {
            if (this.fraction.numerateur / this.fraction.denominateur === 1) {
              html = "<span class='droppable'><span class='plus' >+      </span><span>" + this.symbol + "</span></span>";
            } else {
              html = "<span class='droppable'><span class='moins'>&minus;</span><span>" + this.symbol + "</span></span>";
            }
          } else {
            html = "<span class='droppable'>" + (this.fraction.toHtml()) + "<span>" + this.symbol + "</span></span>";
          }
          break;
        default:
          html = "<span class='droppable'>" + (this.fraction.toHtml()) + "</span>";
      }
      return $(this.id).html(html).droppable({
        accept: "#membre_" + this.side + "_" + this.equation_id + " > li",
        hoverClass: "ui-state-hover",
        drop: function(event, ui) {
          var m1, m2;
          m1 = new Monome(ui.draggable.attr("id"));
          m2 = new Monome($(this).attr("id"));
          if ((m1.type === m2.type) && ((m1.type === "rationnel") || (m1.symbol === m2.symbol))) {
            m2.fraction.ajouter(m1.fraction);
            return ui.draggable.hide({
              duration: "slow",
              easing: "easeInCirc",
              complete: function() {
                m1.remove();
                return m2.update();
              }
            });
          } else {
            return alert("On ne mélange pas symboles & chiffres !");
          }
        }
      });
    };

    Monome.prototype.cross_over = function() {
      return this.side = $(this.id).hasClass("gauche") ? "gauche" : "droite";
    };

    Monome.prototype.insert = function(equation_id, side, fraction, symbol) {
      var html;
      this.equation_id = equation_id;
      this.side = side;
      this.fraction = fraction;
      this.symbol = symbol;
      this.type = this.symbol != null ? "symbol" : "rationnel";
      html = "<li id='" + this.id.slice(1) + "' class='monome " + this.side + "' data-value='" + this.fraction + "' data-type='" + this.type + "' ";
      html += this.symbol != null ? "data-symbol='" + this.symbol + "'></li>" : "></li>";
      $("#membre_" + this.side + "_" + this.equation_id).append(html);
      return this.update();
    };

    Monome.prototype.ajouter = function(monome) {
      if ((this.type === monome.type) && ((this.type === "rationnel") || (this.symbol === monome.symbol))) {
        this.fraction.ajouter(monome.fraction);
      } else {
        alert("On ne mélange pas symboles & chiffres !");
      }
      return this;
    };

    Monome.prototype.toString = function() {
      var s;
      switch (this.type) {
        case "rationnel":
          return s = "(" + (this.fraction.toString()) + ")";
        default:
          return s = "(" + (this.fraction.toString()) + ")" + this.symbol;
      }
    };

    Monome.prototype.toArray = function() {
      return monomeString_to_array(this.toString());
    };

    Monome.prototype.toHtml = function() {
      var html, _ref;
      html = "<li id='" + this.id.slice(1) + "' class='monome " + this.side + "' data-value='" + (this.fraction.toString()) + "' data-type='" + this.type + "' data-symbol='" + this.symbol + "'><span class='monome_html'>";
      switch (this.type) {
        case "symbol":
          if ((_ref = this.fraction.numerateur * this.fraction.denominateur) === (-1) || _ref === 1) {
            if (this.fraction.numerateur / this.fraction.denominateur === 1) {
              return html += "<span class='droppable'><span class='plus'>+</span><span>" + this.symbol + "</span></span></li>";
            } else {
              return html += "<span class='droppable'><span class='moins'>&minus;</span><span>" + this.symbol + "</span></span></li>";
            }
          } else {
            return html += "" + (this.fraction.toHtml()) + "<span>" + this.symbol + "</span></span></li>";
          }
          break;
        case "rationnel":
          return html += "" + (this.fraction.toHtml()) + "</span></li>";
      }
    };

    return Monome;

  })();

  monomeString_to_array = function(s) {
    var foo, pattern_terme;
    if (debug) {
      console.log("monomeString_to_array(" + s + ")");
    }
    pattern_terme = /\([\+\-]*\d+[/\d+]*\)(\w+²{0,1})*/g;
    foo = s.match(pattern_terme);
    if ((foo != null) && foo[0] === s) {
      if (debug) {
        alert("" + s + " match regex:" + pattern_terme);
      }
      foo = s.split(")");
      return foo = foo[1] ? [foo[0].slice(1), foo[1]] : [foo[0].slice(1)];
    } else {
      return alert("Vous devriez effacer l'invite de commande et envisager quelquechose de mieux pondéré...ok !?");
    }
  };

  monomesString_insert = function(membre, side, id) {
    var fraction, m, monomeString, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = membre.length; _i < _len; _i++) {
      monomeString = membre[_i];
      m = monomeString.split(")");
      fraction = fracString_to_frac(m[0].slice(1));
      if (m[1]) {
        _results.push((new Monome()).insert(id, side, fraction, m[1]));
      } else {
        _results.push((new Monome()).insert(id, side, fraction));
      }
    }
    return _results;
  };

  generate_equation_string = function(n, min, max) {
    var coeff, equation, side, str, toss, _i, _j, _len, _ref;
    if (min == null) {
      min = -10;
    }
    if (max == null) {
      max = 10;
    }
    equation = {};
    equation["signe"] = signes[Math.floor(Math.random() * signes.length)];
    _ref = ["gauche", "droite"];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      side = _ref[_i];
      str = "";
      for (_j = 1; 1 <= n ? _j <= n : _j >= n; 1 <= n ? _j++ : _j--) {
        coeff = Math.floor(Math.random() * (max - min + 1)) + min;
        toss = Math.floor(Math.random() * 2.) - 1;
        str += toss === 0 ? "+(" + coeff + ") " : "+(" + coeff + ")x ";
      }
      equation[side] = str.slice(1);
    }
    return equation = "" + equation['gauche'] + " " + equation['signe'] + " " + equation['droite'];
  };

  obtenir_la_solution = function(id) {
    var $li_droite, $li_gauche, s, signe, solution, _ref;
    if ($("#equation_" + id + " > ul.membre_gauche > li").length === 1 && $("#equation_" + id + " > ul.membre_droite > li").length === 1) {
      $li_gauche = $("#equation_" + id + " > ul.membre_gauche > li");
      $li_droite = $("#equation_" + id + " > ul.membre_droite > li");
      if ($li_gauche.attr("data-symbol") && !$li_droite.attr("data-symbol")) {
        if ($li_gauche.attr("data-value") === "1/1" || $li_gauche.attr("data-value") === "1") {
          _ref = [$("#signe_" + id).text(), fracString_to_frac($li_droite.attr("data-value")).irreductible().toHtml()], signe = _ref[0], s = _ref[1];
          switch (signe) {
            case "=":
              solution = "S = {" + s + "}";
              break;
            case ">":
              solution = "S = ]" + s + " ; +∞ [";
              break;
            case "≥":
              solution = "S = [" + s + " ; +∞ [";
              break;
            case "<":
              solution = "S = ] -∞ ; " + s + "]";
              break;
            case "≤":
              solution = "S = ] -∞ ; " + s + "]";
          }
          return $("#solution_" + id).html(solution);
        } else {
          return alert("On ne peut pas encore lire la solution ! il faut que le coefficient _ l'inconnue soit 1.");
        }
      } else {
        return alert("On ne peut pas encore lire la solution ! il faut une l'inconnue à gauche et une valeur à droite.");
      }
    } else {
      return alert("On ne peut pas encore lire la solution ! il faut un seul terme à gauche et un seul terme à droite.");
    }
  };

  ajouter_membre = function(id, array, sign) {
    var fraction, side, _i, _j, _len, _len1, _ref, _ref1, _results, _results1;
    fraction = fracString_to_frac(array[0]);
    fraction.multiplier(fracString_to_frac("" + sign));
    switch (array.length) {
      case 1:
        _ref = ["gauche", "droite"];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          side = _ref[_i];
          _results.push((new Monome()).insert(id, side, fraction));
        }
        return _results;
        break;
      case 2:
        _ref1 = ["gauche", "droite"];
        _results1 = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          side = _ref1[_j];
          _results1.push((new Monome()).insert(id, side, fraction, array[1]));
        }
        return _results1;
        break;
      default:
        return alert("erreur dans ajouter_membre " + fraction);
    }
  };

  multiplier_membre = function(facteur, id) {
    if (facteur.numerateur) {
      if (facteur.numerateur / facteur.denominateur < 0) {
        $("#signe_" + id).text(changementSens[$("#signe_" + id).text()]);
      }
      return $("#equation_" + id + " > ul > li.monome").each(function() {
        var m;
        m = new Monome($(this).attr("id"));
        m.fraction.multiplier(facteur);
        return m.update();
      });
    }
  };

  get_focused_id = function() {
    var id;
    return id = $(".focus").attr("id") ? $(".focus").attr("id").split("_")[1] : alert("Selectionner une équation !");
  };

  operation_sur_equation = function(mode, id) {
    var array, facteur, _ref;
    if (_ref = $("#equation_string").val().slice(-1), __indexOf.call(liste_des_chiffres, _ref) >= 0) {
      $("#equation_string").val($("#equation_string").val().concat(')'));
    }
    id = get_focused_id();
    array = monomeString_to_array($("#equation_string").val());
    if ((id != null) && (array != null)) {
      switch (array.length) {
        case 1:
          facteur = fracString_to_frac(array[0]);
          switch (mode) {
            case "diviser":
              facteur.inverse();
              return multiplier_membre(facteur, id);
            case "multiplier_distribuer":
              return multiplier_membre(facteur, id);
            case "retrancher":
              return ajouter_membre(id, array, -1);
            case "ajouter":
              return ajouter_membre(id, array, 1);
          }
          break;
        case 2:
          switch (mode) {
            case "retrancher":
              return ajouter_membre(id, array, -1);
            case "ajouter":
              return ajouter_membre(id, array, 1);
            default:
              return alert("On ne peut pas encore faire cela !");
          }
      }
    } else {
      return alert("Poids surement mal formé !");
    }
  };

  $(function() {
    var addCurve, board, clearAll, doIt, monome_irreductible, once, p, plot;
    board = JXG.JSXGraph.initBoard('box', {
      boundingbox: [-5, 8, 8, -5],
      axis: true
    });
    addCurve = function(board, func, atts) {
      var f;
      return f = board.create('functiongraph', [func], atts);
    };
    plot = function(func, atts) {
      if (atts === null) {
        return addCurve(board, func, {
          strokewidth: 2
        });
      } else {
        return addCurve(board, func, atts);
      }
    };
    p = board.create('point', [1, 1], {
      style: 6,
      name: 'p'
    });
    clearAll = function() {
      JXG.JSXGraph.freeBoard(board);
      board = JXG.JSXGraph.initBoard('box', {
        boundingbox: [-5, 8, 8, -5],
        axis: true
      });
      return p = board.create('point', [3, -4], {
        style: 6,
        name: 'p'
      });
    };
    doIt = function() {
      var f, g, s;
      s = $("#equation_string").val();
      s = s.replace(/[\(]/g, "").replace(/\)/g, "").replace(/\x/g, "*x").replace(/\+\-/, "-");
      f = s.split(/[=<>≤≥]/)[0];
      f = "function f(x){ return " + f + ";};plot(f);";
      g = s.split(/[=<>≤≥]/)[1];
      g = "function g(x){ return " + g + ";};plot(g);";
      return eval(f + g);
    };
    $("#plotter").on("click", function() {
      return doIt();
    });
    $("#eraser").on("click", function() {
      return clearAll();
    });
    $("#generer_equation").on("click", function() {
      return $("#equation_string").val(generate_equation_string(Math.floor(10 * Math.random()) + 1));
    });
    $('body').on("click", ".equation", function() {
      $(".focus").toggleClass("focus");
      return $("#equation_operator").show().appendTo($(this).toggleClass("focus"));
    });
    $("body").on("click", ".deleteButton", function(event) {
      event.stopPropagation();
      if ($(this).hasClass("focus")) {
        $("body").append($("#equation_operator"));
      }
      return $(this).parent().hide('easeInElastic', function() {
        return $(this).remove();
      });
    });
    $("#inserer_equation").on("click", function() {
      var foo, html, id, match, mdd, mdg, opposite_side, pattern_equation, s, side, signe, _i, _len, _ref, _ref1;
      if (s = $("#equation_string").val()) {
        if (_ref = s.slice(-1), __indexOf.call(liste_des_chiffres, _ref) >= 0) {
          $("#equation_string").val(s + ')');
        }
        s = $("#equation_string").val().replace(/\s+/g, '');
        pattern_equation = /((?:\([\+\-]*\d+[\/\d+]*\)(?:\w+²?)*)(?:\+(?:\([\+\-]*\d+[\/\d+]*\)(?:\w+²?)*))*)([<≤=≥>])((?:\([\+\-]*\d+[\/\d+]*\)(?:\w+²?)*)(?:\+(?:\([\+\-]*\d+[\/\d+]*\)(?:\w+²?)*))*)/g;
        foo = s.match(pattern_equation);
        if ((foo !== null) && (foo[0].length === s.length)) {
          match = pattern_equation.exec(s);
          signe = match[2];
          mdg = match[1].split("+");
          mdd = match[3].split("+");
          id = unique_id++;
          html = "<div id='equation_" + id + "' class='equation' >\n    <button id='deleteButton_" + id + "' class='deleteButton' title='Supprimer cette équation'>x</button>\n    <ul id='membre_gauche_" + id + "' class='membre_gauche'></ul>\"\n    <span id='signe_" + id + "' class='signe'>" + signe + "</span>\"\n    <ul id='membre_droite_" + id + "' class='membre_droite'></ul>\"\n    <p id='solution_" + id + "'></p>\n</div>";
          $("#equations_div").append(html);
          monomesString_insert(mdg, "gauche", id);
          monomesString_insert(mdd, "droite", id);
          _ref1 = ["gauche", "droite"];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            side = _ref1[_i];
            opposite_side = side === "gauche" ? "droite" : "gauche";
            $(".membre_" + side).each(function() {
              id = $(this).attr("id").split("_")[2];
              return $("#membre_" + side + "_" + id).sortable({
                connectWith: "#membre_" + opposite_side + "_" + id,
                receive: function(event, ui) {
                  var m, _j, _len1, _ref2, _results;
                  m = new Monome(ui.item.attr("id"));
                  m.fraction.oppose();
                  ui.item.replaceWith(m.toHtml());
                  $(m.id).toggleClass("gauche droite");
                  _ref2 = ["gauche", "droite"];
                  _results = [];
                  for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                    s = _ref2[_j];
                    if ($("#membre_" + s + "_" + id + " > li").length === 0) {
                      _results.push((new Monome()).insert(id, s, new Fraction(0, 1)));
                    } else {
                      _results.push(void 0);
                    }
                  }
                  return _results;
                }
              });
            });
          }
          $("#equations_div").sortable();
          return $("#equation_" + id).trigger("click");
        } else {
          return alert("Vérifier que l'équation est correctement formatée");
        }
      }
    });
    (once = function() {
      var char, _i, _j, _len, _len1, _ref, _ref1;
      $("#toggle_help").on("click", function() {
        return $("#help, #aside, #footer").toggle();
      });
      $("#help, #aside, #footer").toggle();
      _ref = liste_des_variables.concat(liste_des_operateurs.concat(["/"].concat(liste_des_signes)));
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        char = _ref[_i];
        $("#equation_panel").append("<button id='var_" + char + "' class='panel_touch'>" + char + "</button>");
      }
      $("#equation_panel").append("<br>");
      _ref1 = liste_des_chiffres.concat(["&leftarrow;"]);
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        char = _ref1[_j];
        $("#equation_panel").append("<button id='var_" + char + "' class='panel_touch'>" + char + "</button>");
      }
      return $("button").button();
    })();
    $("#effacer_equation_string").on("click", function() {
      return $("#equation_string").val("");
    });
    $("body").on("click", ".selectAllButton", function(event) {
      var id;
      if (id = get_focused_id()) {
        return $("#equation_" + id + ".focus ul > .monome").addClass("selected");
      }
    });
    monome_irreductible = function(id) {
      var m;
      (m = new Monome(id)).irreductible();
      return $(m.id).replaceWith(m.toHtml());
    };
    $("body").on("dblclick", ".monome", function() {
      return monome_irreductible($(this).attr("id"));
    });
    $("body").on("click", ".simplifier_les_monomes", function() {
      var id;
      if (id = get_focused_id()) {
        return $("#equation_" + id + " > ul > li.selected").each(function() {
          return monome_irreductible($(this).attr("id"));
        });
      }
    });
    $('body').on("click", "li", function(event) {
      var m;
      m = new Monome($(this).toggleClass("selected").attr("id"));
      if (m.fraction.numerateur === 0) {
        switch ($(this).siblings().length) {
          case 0:
            m.type = "rationnel";
            m.fraction.numerateur = 0;
            return m.update();
          default:
            return $(this).remove();
        }
      } else {
        return $("#equation_string").val(m.toString());
      }
    });
    $('body').on("click", ".panel_touch", function() {
      var caractere_precedent, char, saisie, _ref;
      _ref = [$(this).attr("id").split("_")[1], $("#equation_string").val()], char = _ref[0], saisie = _ref[1];
      caractere_precedent = saisie.length > 0 ? saisie.slice(-1) : '';
      if (char === '←') {
        saisie = saisie.length < 2 ? "" : saisie.slice(0, +(saisie.length - 2) + 1 || 9e9);
      } else {
        if (caractere_precedent === '') {
          if (__indexOf.call(liste_des_operateurs, char) >= 0) {
            saisie += (char === '-' ? "(-" : "(");
          } else if (__indexOf.call(liste_des_chiffres, char) >= 0) {
            saisie += "(" + char;
          } else if (__indexOf.call(liste_des_variables, char) >= 0) {
            saisie += "(1)" + char;
          } else if (__indexOf.call(liste_des_signes, char) >= 0) {
            alert("il faut un membre à gauche !");
          } else if (char === '/') {
            alert("Impossible de commencer par ça !");
          }
        } else if (__indexOf.call(liste_des_operateurs, caractere_precedent) >= 0 || caractere_precedent === '(') {
          if (__indexOf.call(liste_des_operateurs, char) >= 0) {
            if (caractere_precedent !== '-') {
              saisie += (char === '-' ? "" + char : alert("Deux opérateurs d'affilés ?"));
            } else {
              alert("Deux fois le même opérateur ?");
            }
          } else if (__indexOf.call(liste_des_chiffres, char) >= 0) {
            saisie += "" + char;
          } else if (__indexOf.call(liste_des_variables, char) >= 0) {
            saisie += "1)" + char;
          } else if (__indexOf.call(liste_des_signes, char) >= 0) {
            alert("Effacer le dernier signe !");
          } else if (char === '/') {
            alert("Impossible d'ecrire " + caractere_precedent + char + " !");
          }
        } else if (__indexOf.call(liste_des_chiffres, caractere_precedent) >= 0) {
          if (__indexOf.call(liste_des_operateurs, char) >= 0) {
            saisie += (char === '-' ? ")+(-" : ")" + char + "(");
          } else if (__indexOf.call(liste_des_chiffres, char) >= 0) {
            saisie += "" + char;
          } else if (__indexOf.call(liste_des_variables, char) >= 0) {
            saisie += ")" + char;
          } else if (__indexOf.call(liste_des_signes, char) >= 0) {
            saisie += ")" + char;
          } else if (char === '/') {
            saisie += "" + char;
          }
        } else if (__indexOf.call(liste_des_variables, caractere_precedent) >= 0) {
          if (__indexOf.call(liste_des_operateurs, char) >= 0) {
            saisie += (char === '-' ? "+(-" : "" + char + "(");
          } else if (__indexOf.call(liste_des_chiffres, char) >= 0) {
            alert("Les coefficients se placent devant les variables !");
          } else if (__indexOf.call(liste_des_variables, char) >= 0) {
            saisie += "" + char;
          } else if (__indexOf.call(liste_des_signes, char) >= 0) {
            saisie += "" + char;
          } else if (char === '/') {
            alert("Impossible d'ecrire " + caractere_precedent + char + " !");
          }
        } else if (__indexOf.call(liste_des_signes, caractere_precedent) >= 0) {
          if (__indexOf.call(liste_des_operateurs, char) >= 0) {
            saisie += (char === '-' ? "(-" : "(");
          } else if (__indexOf.call(liste_des_chiffres, char) >= 0) {
            saisie += "(" + char;
          } else if (__indexOf.call(liste_des_variables, char) >= 0) {
            saisie += "(1)" + char;
          } else if (__indexOf.call(liste_des_signes, char) >= 0) {
            alert("_ux signes d'affilés");
          } else if (char === '/') {
            alert("Impossible d'ecrire " + caractere_precedent + char + " !");
          }
        } else if (caractere_precedent === '/') {
          if (__indexOf.call(liste_des_operateurs, char) >= 0) {
            alert("Impossible d'ecrire " + caractere_precedent + char + " !");
          } else if (__indexOf.call(liste_des_chiffres, char) >= 0) {
            saisie += "" + char;
          } else if (__indexOf.call(liste_des_variables, char) >= 0) {
            alert("Et la fraction ?");
          } else if (__indexOf.call(liste_des_signes, char) >= 0) {
            alert("Et la fraction ?");
          } else if (char === '/') {
            alert("Ca y est déjà !");
          }
        } else {
          saisie += "" + char;
        }
      }
      return $("#equation_string").val(saisie);
    });
    $("body").on("click", ".obtenirSolution", function() {
      var id;
      if (id = get_focused_id()) {
        return obtenir_la_solution(id);
      }
    });
    $("body").on("click", ".multiplier_distribuer", function() {
      return operation_sur_equation("multiplier_distribuer");
    });
    $("body").on("click", ".diviser", function() {
      return operation_sur_equation("diviser");
    });
    $("body").on("click", ".ajouter", function() {
      return operation_sur_equation("ajouter");
    });
    $("body").on("click", ".retrancher", function() {
      return operation_sur_equation("retrancher");
    });
    $("body").on("click", ".sommationMonome", function() {
      var coeffs, fraction, id, membre, selected, side, symbol, _i, _len, _ref, _results;
      if (id = get_focused_id()) {
        _ref = ["gauche", "droite"];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          side = _ref[_i];
          membre = "#membre_" + side + "_" + id;
          selected = "" + membre + " > ." + side + ".selected";
          coeffs = {};
          coeffs["rationnel"] = new Fraction(0, 1);
          if (debug) {
            console.log("sommation_par_membre : " + selected + " (" + ($(selected).length) + ")");
          }
          $(selected).each(function() {
            var m;
            m = new Monome($(this).attr("id"));
            switch (m.type) {
              case "symbol":
                return coeffs[m.symbol] = coeffs[m.symbol] != null ? m.fraction.ajouter(coeffs[m.symbol]) : m.fraction;
              case "rationnel":
                return coeffs["rationnel"] = m.fraction.ajouter(coeffs["rationnel"]);
            }
          });
          for (symbol in coeffs) {
            fraction = coeffs[symbol];
            switch (symbol) {
              case "rationnel":
                (new Monome()).insert(id, side, fraction);
                break;
              default:
                (new Monome()).insert(id, side, fraction, "" + symbol);
            }
          }
          _results.push($(selected).remove());
        }
        return _results;
      }
    });
    $("body").on("click", ".copier", function() {
      var id;
      id = get_focused_id();
      activer_copier_symbole = $("#equation_" + id + " > ul.membre_gauche > li").attr("data-symbol");
      activer_copier_contenu = $("#equation_" + id + " > ul.membre_droite > li");
      return alert("symbole copié : " + activer_copier_symbole);
    });
    return $("body").on("click", ".coller", function() {
      var check_substitute, id, side, _i, _len, _ref, _results;
      check_substitute = function(side, id) {
        return $("#membre_" + side + "_" + id + " > li").each(function() {
          var fraction1, html;
          if ($(this).attr("data-symbol") === activer_copier_symbole) {
            html = "";
            fraction1 = fracString_to_frac($(this).attr("data-value"));
            activer_copier_contenu.each(function() {
              var fraction2, type, value;
              fraction2 = fracString_to_frac($(this).attr("data-value"));
              value = fraction1.multiplier(fraction2);
              type = $(this).attr("data-type");
              if (symbol === "rationnel") {
                return (new Monome()).insert(id, side, value);
              } else {
                return (new Monome()).insert(id, side, value, "" + symbol);
              }
            });
            return $(this).hide("easeInElastic", function() {
              return $(this).remove();
            });
          }
        });
      };
      id = get_focused_id();
      _ref = ["gauche", "droite"];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        side = _ref[_i];
        _results.push(check_substitute(side, id));
      }
      return _results;
    });
  });

}).call(this);
