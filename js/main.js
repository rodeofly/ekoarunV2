// Generated by CoffeeScript 1.4.0
(function() {
  var Fraction, Monome, Operateur, activer_copier_contenu, activer_copier_symbole, ajouter_membre, amount_facteur, amount_minimax, amount_variable, changementSens, debug, fracString_to_frac, generate_equation, generate_equation_string, get_focused_id, get_monome, get_operateur, liste_des_chiffres, liste_des_operateurs, liste_des_signes, liste_des_variables, megateuf, monomeString_to_array, multiplier_distribuer_membre, multiplier_factoriser_membre, operation_sur_equation, signes, stringIdToString, unique_id, _base, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Array.prototype.unique = function() {
    var key, output, value, _i, _ref, _results;
    output = {};
    for (key = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; key = 0 <= _ref ? ++_i : --_i) {
      output[this[key]] = this[key];
    }
    _results = [];
    for (key in output) {
      value = output[key];
      _results.push(value);
    }
    return _results;
  };

  if ((_ref = (_base = Array.prototype).shuffle) == null) {
    _base.shuffle = function() {
      var i, j, _i, _ref1, _ref2;
      if (this.length > 1) {
        for (i = _i = _ref1 = this.length - 1; _ref1 <= 1 ? _i <= 1 : _i >= 1; i = _ref1 <= 1 ? ++_i : --_i) {
          j = Math.floor(Math.random() * (i + 1));
          _ref2 = [this[j], this[i]], this[i] = _ref2[0], this[j] = _ref2[1];
        }
      }
      return this;
    };
  }

  unique_id = 1;

  debug = false;

  activer_copier_symbole = "";

  activer_copier_contenu = {};

  liste_des_chiffres = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];

  liste_des_operateurs = ['+', '-'];

  signes = ['≤', '≤', '≥', '>', '<', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '='];

  liste_des_variables = ['x', 'y', 'z', 't'];

  liste_des_signes = ['=', '<', '>', '≤', '≥'];

  changementSens = {
    '=': '=',
    '<': '>',
    '>': '<',
    '≤': '≥',
    '≥': '≤'
  };

  amount_variable = 1;

  amount_facteur = 2;

  amount_minimax = 2;

  fracString_to_frac = function(value) {
    var d, foo, n, _ref1;
    foo = value.split("/");
    switch (foo.length) {
      case 2:
        _ref1 = [parseInt(foo[0]), parseInt(foo[1])], n = _ref1[0], d = _ref1[1];
        if ((n != null) && (d != null)) {
          return foo = new Fraction(n, d);
        } else {
          return alert("Erreur : fracString_to_frac, n is " + n + " and d is " + d + " !");
        }
        break;
      case 1:
        n = parseInt(foo[0]);
        if (n != null) {
          return foo = new Fraction(n, 1);
        } else {
          return alert("Erreur : fracString_to_frac, n is " + n + " !");
        }
        break;
      default:
        return alert("Erreur : fracString_to_frac, value is " + value + " !");
    }
  };

  Fraction = (function() {

    function Fraction(numerateur, denominateur) {
      this.numerateur = numerateur;
      this.denominateur = denominateur;
    }

    Fraction.prototype.irreductible = function() {
      var a, b, _ref1, _ref2, _ref3, _ref4;
      _ref1 = [this.numerateur, this.denominateur], a = _ref1[0], b = _ref1[1];
      while (b !== 0) {
        _ref2 = [b, a % b], a = _ref2[0], b = _ref2[1];
      }
      _ref3 = [this.numerateur / a, this.denominateur / a], this.numerateur = _ref3[0], this.denominateur = _ref3[1];
      if (this.denominateur < 0) {
        _ref4 = [-this.numerateur, -this.denominateur], this.numerateur = _ref4[0], this.denominateur = _ref4[1];
      }
      return this;
    };

    Fraction.prototype.inverse = function() {
      var _ref1;
      if (this.numerateur !== 0) {
        _ref1 = [this.denominateur, this.numerateur], this.numerateur = _ref1[0], this.denominateur = _ref1[1];
        return this;
      }
    };

    Fraction.prototype.oppose = function() {
      this.numerateur = -this.numerateur;
      return this;
    };

    Fraction.prototype.toString = function() {
      return "" + this.numerateur + "/" + this.denominateur;
    };

    Fraction.prototype.toHtml = function() {
      var html;
      if (this.numerateur / this.denominateur === 1) {
        return html = "<span class='plus'>&plus;</span>";
      } else if (this.numerateur / this.denominateur === -1) {
        return html = "<span class='moins'>&minus;</span>";
      } else if (this.denominateur === 1) {
        if (this.numerateur < 0) {
          return html = "<span class='moins'>&minus;</span><span class='rationnel'>" + (Math.abs(this.numerateur)) + "</span>";
        } else {
          return html = "<span class='plus'>&plus;</span><span class='rationnel'>" + this.numerateur + "</span>";
        }
      } else {
        if (this.numerateur < 0) {
          return html = "<span class='moins'>&minus;</span><span class='fraction'><span class='top'>" + (Math.abs(this.numerateur)) + "</span><span class='bottom'>" + this.denominateur + "</span></span>";
        } else {
          return html = "<span class='plus'>&plus;</span><span class='fraction'><span class='top'>" + this.numerateur + "</span><span class='bottom'>" + this.denominateur + "</span></span>";
        }
      }
    };

    Fraction.prototype.ajouter = function(fraction) {
      var _ref1, _ref2;
      if (this.nominateur !== fraction.denominateur) {
        _ref1 = [this.numerateur * fraction.denominateur + fraction.numerateur * this.denominateur, this.denominateur * fraction.denominateur], this.numerateur = _ref1[0], this.denominateur = _ref1[1];
      } else {
        _ref2 = [this.numerateur + fraction.numerateur, this.denominateur], this.numerateur = _ref2[0], this.denominateur = _ref2[1];
      }
      return this;
    };

    Fraction.prototype.multiplier = function(fraction) {
      var _ref1;
      _ref1 = [this.numerateur * fraction.numerateur, this.denominateur * fraction.denominateur], this.numerateur = _ref1[0], this.denominateur = _ref1[1];
      return this;
    };

    return Fraction;

  })();

  monomeString_to_array = function(s) {
    var foo, fracString, pattern_terme, power, symbol;
    if (debug) {
      console.log("monomeString_to_array(" + s + ")");
    }
    pattern_terme = /([\+\-]?\d+(?:\/\d+)*)[.+](\w+)\^(\d+)*/g;
    foo = s.match(pattern_terme);
    if ((foo != null) && foo[0] === s) {
      foo = regex.exec(pattern_terme);
      fracString = foo[1];
      symbol = foo[2];
      return power = foo[3];
    } else {
      return alert("Vous devriez effacer l'invite de commande et envisager quelquechose de mieux pondéré...ok !?");
    }
  };

  get_monome = function($monome) {
    var m;
    if ($monome.is("[data-fraction]") && $monome.is("[data-symbol]") && $monome.is("[data-power]")) {
      m = new Monome();
      m.id = "#" + ($monome.attr('id'));
      m.parent_id = "#" + ($(m.id).parent().attr('id'));
      m.fraction = fracString_to_frac($(m.id).attr("data-fraction"));
      m.symbol = $(m.id).attr("data-symbol");
      m.power = parseInt($(m.id).attr("data-power"));
      return m;
    } else {
      return alert("get_monome did not work !");
    }
  };

  Monome = (function() {

    function Monome(fraction, symbol, power) {
      var _ref1, _ref2, _ref3;
      this.fraction = fraction;
      this.symbol = symbol;
      this.power = power;
      this.id = "#" + (unique_id++);
      if ((_ref1 = this.fraction) == null) {
        this.fraction = new Fraction(1, 1);
      }
      if ((_ref2 = this.symbol) == null) {
        this.symbol = "1";
      }
      if ((_ref3 = this.power) == null) {
        this.power = 1;
      }
    }

    Monome.prototype.clone = function() {
      var m;
      m = new Monome();
      m.id = "#" + (unique_id++);
      m.parent_id = this.parent_id;
      m.fraction = this.fraction;
      m.symbol = this.symbol;
      m.power = this.power;
      return m;
    };

    Monome.prototype.randomize = function(symbol, power) {
      var coeff, min;
      this.symbol = symbol;
      this.power = power;
      min = -amount_minimax;
      coeff = Math.floor(Math.random() * (amount_minimax - min + 1)) + min;
      this.fraction = new Fraction(coeff, 1);
      return this;
    };

    Monome.prototype.update = function() {
      if (this.symbol === "1") {
        this.power = 1;
      }
      $(this.id).attr("data-fraction", this.fraction.toString());
      $(this.id).attr("data-power", this.power);
      return $(this.id).html(this.html_content());
    };

    Monome.prototype.irreductible = function() {
      this.fraction.irreductible();
      return this.update();
    };

    Monome.prototype.remove = function() {
      return $(this.id).remove();
    };

    Monome.prototype.html_content = function() {
      var html, power_div, symbol_div;
      if ((this.symbol !== "1") || (Math.abs(this.fraction.numerateur / this.fraction.denominateur) === 1)) {
        symbol_div = "<span class='symbol'>" + this.symbol + "</span>";
      } else {
        symbol_div = "";
      }
      power_div = this.power === 1 ? "" : "<sup class='power'>" + this.power + "</sup>";
      return html = "" + (this.fraction.toHtml()) + symbol_div + power_div;
    };

    Monome.prototype.insert = function(id) {
      $(id).append("<li id='" + this.id.slice(1) + "' class='monome item' data-fraction='" + this.fraction + "' data-symbol='" + this.symbol + "'  data-power='" + this.power + "'></li>");
      return this.update();
    };

    Monome.prototype.insert_from_string = function(equation_id, monomeString) {
      var m, _ref1, _ref2;
      this.equation_id = equation_id;
      m = monomeString.split(".");
      this.fraction = fracString_to_frac(m[0]);
      alert(this.fraction);
      if (m.length > 1) {
        m = m[1].split("^");
        _ref1 = [m[0], m[1]], this.symbol = _ref1[0], this.power = _ref1[1];
      } else {
        _ref2 = [1, 1], this.symbol = _ref2[0], this.power = _ref2[1];
      }
      return (new Monome()).insert(this.equation_id);
    };

    Monome.prototype.ajouter = function(monome) {
      if (this.symbol === monome.symbol) {
        this.fraction.ajouter(monome.fraction);
      } else {
        alert("On ne mélange pas symboles & chiffres !");
      }
      return this;
    };

    Monome.prototype.toString = function() {
      return "" + (this.fraction.toString()) + "." + this.symbol + "^" + this.power;
    };

    Monome.prototype.toArray = function() {
      return monomeString_to_array(this.toString());
    };

    Monome.prototype.toHtml = function() {
      var html;
      return html = "<li id='" + this.id.slice(1) + "' class='monome item' data-fraction='" + (this.fraction.toString()) + "' data-symbol='" + this.symbol + "' data-power='" + this.power + "'><span class='monome_html'>" + (this.html_content()) + "</span></li>";
    };

    return Monome;

  })();

  stringIdToString = function(stringId) {
    return stringId.replace(/(\#\d+)/g, function(match, id, offset, string) {
      console.log($(id).id);
      return get_monome($(id)).toString();
    });
  };

  get_operateur = function($operateur) {
    var o;
    if ($operateur.is("[data-symbol]") && $operateur.is("[data-type]") && $operateur.is("[data-compacted]")) {
      o = new Operateur();
      o.id = "#" + ($operateur.attr('id'));
      o.parent_id = "#" + ($(o.id).parent().attr('id'));
      o.type = $(o.id).attr("data-type");
      o.symbol = $(o.id).attr("data-symbol");
      o.compacted = $(o.id).attr("data-compacted");
      return o;
    } else {
      return alert("get_operateur did not work !");
    }
  };

  Operateur = (function() {

    function Operateur(symbol, compacted) {
      var classe, _ref1, _ref2;
      this.symbol = symbol;
      this.compacted = compacted;
      classe = {
        "*": "multiplication",
        "+": "addition"
      };
      this.id = "#" + (unique_id++);
      if ((_ref1 = this.symbol) == null) {
        this.symbol = "+";
      }
      this.type = classe[this.symbol];
      if ((_ref2 = this.compacted) == null) {
        this.compacted = false;
      }
    }

    Operateur.prototype.toHtml = function() {
      var html;
      return html = "<ul id='" + this.id.slice(1) + "' class='operateur " + this.type + " item' data-symbol='" + this.symbol + "' data-type='" + this.type + "' data-compacted='" + this.compacted + "'></ul>";
    };

    Operateur.prototype.clone = function() {
      var o;
      o = new Operateur();
      o.id = "#" + (unique_id++);
      o.parent_id = this.parent_id;
      o.type = this.type;
      o.symbol = this.symbol;
      o.compacted = this.compacted;
      return o;
    };

    Operateur.prototype.monomesString_insert = function(membre) {
      var monomeString, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = membre.length; _i < _len; _i++) {
        monomeString = membre[_i];
        _results.push((new Monome()).insert_from_string(this.id, monomeString));
      }
      return _results;
    };

    Operateur.prototype.toStringId = function() {
      var string, symbol;
      symbol = this.symbol;
      string = "";
      $(this.id).children().each(function() {
        var m;
        if ($(this).is("ul")) {
          m = get_operateur($(this));
          return string += "" + symbol + "[" + (m.toStringId()) + "]";
        } else {
          m = get_monome($(this));
          return string += "" + symbol + m.id;
        }
      });
      return string.slice(1);
    };

    return Operateur;

  })();

  megateuf = function() {
    $("ul.operateur").each(function() {
      if (($(this).children().length === 1) && ((!$(this).parent().hasClass("equation")) || ($(this).siblings().length > 0))) {
        return $(this).contents().unwrap();
      } else if ($(this).attr("data-symbol") === $(this).parent().attr("data-symbol")) {
        return $(this).contents().unwrap();
      }
    });
    return $("ul.operateur").each(function() {
      var op;
      op = get_operateur($(this));
      $("" + op.id + " > li.monome").droppable({
        accept: "" + op.id + " > li.monome",
        hoverClass: "state-hover",
        activeClass: "li-state-active",
        drop: function(event, ui) {
          var m1, m2;
          event.stopImmediatePropagation();
          console.log("woot");
          m1 = get_monome(ui.draggable);
          m2 = get_monome($(this));
          switch (op.type) {
            case "addition":
              if ((m1.symbol === m2.symbol) && (m1.power === m2.power)) {
                m2.fraction.ajouter(m1.fraction);
                m2.update();
                m1.remove();
              } else {
                if (m1.power !== m2.power) {
                  alert("attention, ce n'est pas la meme puissance !");
                } else {
                  alert("On ne peut pas tout mélanger !");
                }
              }
              break;
            case "multiplication":
              if (m1.symbol === m2.symbol) {
                m2.fraction.multiplier(m1.fraction);
                m2.power += 1;
                m2.update();
                m1.remove();
              } else if (m2.symbol === "1") {
                m1.fraction.multiplier(m2.fraction);
                m1.update();
                m2.remove();
              } else if (m1.symbol === "1") {
                m2.fraction.multiplier(m1.fraction);
                m2.update();
                m1.remove();
              } else {
                m2.fraction.multiplier(m1.fraction);
                m1.fraction = new Fraction(1, 1);
                m2.update();
                m1.update();
              }
          }
          return megateuf();
        }
      });
      $("" + op.id + ".multiplication > ul.addition").droppable({
        accept: "" + op.id + " > li.monome, " + op.id + " > ul.operateur",
        hoverClass: "state-hover",
        activeClass: "ul-state-active",
        drop: function(event, ui) {
          var m, op2, op3;
          op2 = get_operateur($(this));
          if (ui.draggable.is("ul")) {
            op3 = get_operateur(ui.draggable);
            switch (op3.type) {
              case "addition":
                console.log("woor");
                $("" + op2.id + " > ul.operateur, " + op2.id + " > li.monome").each(function() {
                  var clone, op4;
                  op4 = new Operateur("*");
                  $(op2.id).append(op4.toHtml());
                  $(op4.id).append($(this));
                  clone = new Operateur(op3.symbol);
                  $(this).after(clone.toHtml());
                  $(clone.id).html($(op3.id).html());
                  return $(clone.id).find('[id]').each(function() {
                    return $(this).attr("id", "" + (unique_id++));
                  });
                });
            }
            $(op3.id).remove();
          } else {
            m = get_monome(ui.draggable);
            switch (op.type) {
              case op2.type:
                $(op2.id).append($(m.id));
                break;
              case "addition":
                op3 = new Operateur("+");
                console.log("woot");
                $(op2.id).wrap(op3.toHtml());
                if (op2.type === "multiplication") {
                  m.clone().insert(op3.id);
                }
                break;
              case "multiplication":
                console.log("waaot");
                $(op2.id).children("ul, li").each(function() {
                  op3 = new Operateur("*");
                  $(this).wrap(op3.toHtml());
                  if (op2.type === "addition") {
                    return m.clone().insert(op3.id);
                  }
                });
            }
            $(m.id).remove();
          }
          return megateuf();
        }
      });
      $("" + op.id + ".addition > ul.multiplication").droppable({
        accept: "" + op.id + " > li.monome, " + op.id + " > ul.multiplication",
        hoverClass: "state-hover",
        activeClass: "ul-state-active",
        drop: function(event, ui) {
          var m2, m3, match2, match3, op2, op3, str2, str3, _ref1, _ref2;
          op2 = get_operateur($(this));
          if (ui.draggable.is("ul")) {
            op3 = get_operateur(ui.draggable);
            str2 = stringIdToString(op2.toStringId());
            str3 = stringIdToString(op3.toStringId());
            _ref1 = [/([-+]?\d+(?:\/\d+)?)[\.+](.*)/g.exec(str2), /([-+]?\d+(?:\/\d+)?)[\.+](.*)/g.exec(str3)], match2 = _ref1[0], match3 = _ref1[1];
            if ((match2 != null) && (match3 != null) && (match2.length === 3) && (match3.length === 3) && (match2[2] === match3[2])) {
              console.log($(op2.id).children("li:first").attr('id'));
              console.log($(op3.id).children("li:first").attr('id'));
              _ref2 = [get_monome($(op2.id).children("li:first")), get_monome($(op3.id).children("li:first"))], m2 = _ref2[0], m3 = _ref2[1];
              m2.fraction.ajouter(m3.fraction);
              $(op3.id).remove();
              return m2.update();
            }
          }
        }
      });
      return $("ul.operateur, li.monome").draggable({
        revert: true
      });
    });
  };

  generate_equation_string = function(n, min, max) {
    var coeff, equation, side, str, toss, _i, _j, _len, _ref1;
    if (min == null) {
      min = -10;
    }
    if (max == null) {
      max = 10;
    }
    equation = {};
    equation["signe"] = signes[Math.floor(Math.random() * signes.length)];
    _ref1 = ["gauche", "droite"];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      side = _ref1[_i];
      str = "";
      for (_j = 1; 1 <= n ? _j <= n : _j >= n; 1 <= n ? _j++ : _j--) {
        coeff = Math.floor(Math.random() * (max - min + 1)) + min;
        toss = Math.floor(Math.random() * 2.) - 1;
        str += toss === 0 ? "+(" + coeff + ")1" : "+(" + coeff + ")x ";
      }
      equation[side] = str.slice(1);
    }
    return equation = "" + equation['gauche'] + " " + equation['signe'] + " " + equation['droite'];
  };

  generate_equation = function() {
    var alphabet, create_equation_membre, html, id, signe;
    id = unique_id++;
    signe = signes[Math.floor(Math.random() * signes.length)];
    html = "<div id='equation_" + id + "' class='equation' >\n     \n    <p id='solution_" + id + "'></p>\n\n    <span id='signe_" + id + "' class='signe'>" + signe + "</span>\n\n    <button id='deleteButton_" + id + "' class='deleteButton' title='Supprimer cette équation'>x</button>   \n</div>";
    $("#equations_div").append(html);
    alphabet = ['1', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'].slice(0, +amount_variable + 1 || 9e9);
    console.log(alphabet);
    create_equation_membre = function(place) {
      var i, j, k, m, op1, op2, op3, _i, _results;
      op1 = new Operateur("+");
      if (place === "before") {
        $("#signe_" + id).before(op1.toHtml());
      } else {
        $("#signe_" + id).after(op1.toHtml());
      }
      _results = [];
      for (i = _i = 1; 1 <= amount_facteur ? _i <= amount_facteur : _i >= amount_facteur; i = 1 <= amount_facteur ? ++_i : --_i) {
        op2 = new Operateur("*");
        $(op1.id).append(op2.toHtml());
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (j = _j = 1; 1 <= amount_minimax ? _j <= amount_minimax : _j >= amount_minimax; j = 1 <= amount_minimax ? ++_j : --_j) {
            op3 = new Operateur("+");
            $(op2.id).append(op3.toHtml());
            _results1.push((function() {
              var _k, _len, _results2;
              _results2 = [];
              for (_k = 0, _len = alphabet.length; _k < _len; _k++) {
                k = alphabet[_k];
                m = new Monome();
                _results2.push(m.randomize(k, 1).insert(op3.id));
              }
              return _results2;
            })());
          }
          return _results1;
        })());
      }
      return _results;
    };
    create_equation_membre("before");
    create_equation_membre("after");
    return megateuf();
  };

  ajouter_membre = function(string) {
    var id;
    id = get_focused_id();
    if (id) {
      return $("#equation_" + id + " > .operateur").each(function() {
        var op;
        op = new Operateur("+");
        $(this).append(op.toHtml());
        return op.monomesString_insert(string);
      });
    }
  };

  multiplier_distribuer_membre = function(facteur) {
    var id;
    id = get_focused_id();
    if (id && facteur.denominateur) {
      return $("#equation_" + id + " > ul > li.monome").each(function() {
        var m;
        m = get_monome($(this));
        m.fraction.multiplier(facteur);
        return m.update();
      });
    }
  };

  multiplier_factoriser_membre = function(string) {
    var id;
    id = get_focused_id();
    if (id) {
      return $("#equation_" + id + " > .operateur").each(function() {
        var op;
        op = new Operateur("*");
        $(this).wrap(op.toHtml());
        return op.monomesString_insert(string);
      });
    }
  };

  get_focused_id = function() {
    var id;
    return id = $(".focus").attr("id") ? $(".focus").attr("id").split("_")[1] : alert("Selectionner une équation !");
  };

  operation_sur_equation = function(mode, id) {
    var array;
    id = get_focused_id();
    array = monomeString_to_array($("#equation_string").val());
    if ((id != null) && (array != null)) {
      switch (mode) {
        case "diviser":
          return multiplier_distribuer_membre(fracString_to_frac(array[0], array[1]));
        case "multiplier_factoriser":
          return multiplier_factoriser_membre($("#equation_string").val().split("+"));
        case "multiplier_distribuer":
          return multiplier_distribuer_membre(fracString_to_frac(array[0], array[1]));
        case "retrancher":
          return ajouter_membre((fracString_to_frac(array[0])).oppose(), array[1]);
        case "ajouter":
          return ajouter_membre($("#equation_string").val().split("+"));
      }
    } else {
      return alert("Poids surement mal formé !");
    }
  };

  $(function() {
    var char, monome_irreductible, once, _i, _j, _len, _len1, _ref1;
    $("#generer_equation_complexe").on("click", function() {
      return generate_equation(2, 2, 2, -10, 10);
    });
    (once = function() {
      return $("#toggle_help").on("click", function() {
        return $("#help, #aside, #footer").toggle();
      });
    })();
    $(".operateur").on("click", function() {
      if (($(this).children().length < 2) || ($(this).attr('data-symbol') === $(this).parent().attr('data-symbol'))) {
        return $(this).unwrap();
      }
    });
    $("#generer_equation").on("click", function() {
      return $("#equation_string").val(generate_equation_string(Math.floor(10 * Math.random()) + 1));
    });
    $("#effacer_equation_string").on("click", function() {
      return $("#equation_string").val("");
    });
    $("body").on("click", ".selectAllButton", function(event) {
      var id;
      if (id = get_focused_id()) {
        return $("#equation_" + id + ".focus ul > .monome").addClass("selected");
      }
    });
    monome_irreductible = function($monome) {
      var m;
      return (m = get_monome($monome)).irreductible();
    };
    $("body").on("dblclick", ".monome", function() {
      return monome_irreductible($(this));
    });
    $("body").on("click", ".simplifier_les_monomes", function() {
      var id;
      if (id = get_focused_id()) {
        return $("#equation_" + id + " > ul > li.selected").each(function() {
          return monome_irreductible($(this));
        });
      }
    });
    $('body').on("click", "li", function(event) {
      var m, op, zero, _ref1;
      event.stopPropagation();
      m = get_monome($(this));
      op = get_operateur($(m.parent_id));
      switch (op.type) {
        case "addition":
          if (m.fraction.numerateur === 0) {
            switch ($("" + m.id).siblings().length) {
              case 0:
                m.update();
                break;
              default:
                $("" + m.id).remove();
            }
          }
          break;
        case "multiplication":
          switch (m.fraction.numerateur / m.fraction.denominateur) {
            case 1:
              switch ($("" + m.id).siblings().length) {
                case 0:
                  m.fraction.numerateur = 1;
                  m.update();
                  break;
                default:
                  if (m.symbol === "1") {
                    $("" + m.id).remove();
                  }
              }
              break;
            case 0:
              $(op.id).empty();
              zero = new Monome();
              _ref1 = ["1", new Fraction(0, 1)], zero.symbol = _ref1[0], zero.fraction = _ref1[1];
              zero.insert(op.id);
          }
      }
      $("#equation_string").val(m.toString());
      return megateuf();
    });
    $('body').on("click", "ul", function(event) {
      var op;
      event.stopPropagation();
      op = get_operateur($(this));
      return $("#equation_string").val(op.toStringId());
    });
    $('body').on("dblclick", "ul.operateur.multiplication", function(event) {
      var index, m1, m2, op, symbols, _ref1, _ref2;
      op = get_operateur($(this));
      if ($("" + op.id + " > ul.operateur").length === 0) {
        _ref1 = [{}, []], index = _ref1[0], symbols = _ref1[1];
        index["1"] = new Fraction(1, 1);
        $(op.id).children().each(function() {
          var current;
          current = get_monome($(this));
          if (current.symbol !== "1") {
            index[current.symbol] = (index[current.symbol] != null) ? current.power + index[current.symbol] : current.power;
          }
          return index["1"] = current.fraction.multiplier(index["1"]);
        });
        $(op.id).empty();
        Object.keys(index).sort().forEach(function(symbol, i) {
          var m;
          (m = new Monome()).symbol = symbol;
          m.fraction = i === 0 ? index["1"] : new Fraction(1, 1);
          m.power = index[symbol];
          return m.insert(op.id);
        });
        if ($("" + op.id + " > li.monome").length > 1) {
          _ref2 = [get_monome($("" + op.id + " > li.monome:first")), get_monome($("" + op.id + " > li:nth-child(2)"))], m1 = _ref2[0], m2 = _ref2[1];
          console.log(m1, m2);
          m2.fraction = m1.fraction;
          m2.update();
          return m1.remove();
        }
      }
    });
    $('body').on("dblclick", "ul.operateur.addition", function(event) {
      var coeffs, fraction, m, op, symbol, _results;
      op = get_operateur($(this));
      if ($("" + op.id + " > ul.operateur").length === 0) {
        coeffs = {};
        coeffs["1"] = new Fraction(0, 1);
        $("" + op.id + " > li.monome").each(function() {
          var m;
          m = get_monome($(this));
          coeffs[m.symbol] = coeffs[m.symbol] != null ? m.fraction.ajouter(coeffs[m.symbol]) : m.fraction;
          return m.remove();
        });
        _results = [];
        for (symbol in coeffs) {
          fraction = coeffs[symbol];
          m = new Monome();
          m.fraction = fraction;
          m.symbol = symbol;
          _results.push(m.insert(op.id));
        }
        return _results;
      }
    });
    _ref1 = liste_des_variables.concat(liste_des_operateurs.concat(["/"].concat(liste_des_signes)));
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      char = _ref1[_i];
      $("#equation_panel").append("<button id='var_" + char + "' class='panel_touch'>" + char + "</button>");
    }
    for (_j = 0, _len1 = liste_des_chiffres.length; _j < _len1; _j++) {
      char = liste_des_chiffres[_j];
      $("#equation_panel").append("<button id='var_" + char + "' class='panel_touch'>" + char + "</button>");
    }
    $("button").button();
    $("body").on("click", ".deleteButton", function() {
      return $(this).parent().hide('easeInElastic', function() {
        return $(this).remove();
      });
    });
    $("body").on("click", ".multiplier_distribuer", function() {
      return operation_sur_equation("multiplier_distribuer");
    });
    $("body").on("click", ".multiplier_factoriser", function() {
      return operation_sur_equation("multiplier_factoriser");
    });
    $("body").on("click", ".diviser", function() {
      return operation_sur_equation("diviser");
    });
    $("body").on("click", ".ajouter", function() {
      return operation_sur_equation("ajouter");
    });
    $("body").on("click", ".retrancher", function() {
      return operation_sur_equation("retrancher");
    });
    $("body").on("click", ".equation", function() {
      $(".focus").toggleClass("focus");
      return $(this).toggleClass("focus");
    });
    $('body').on("click", ".panel_touch", function() {
      var caractere_precedent, saisie, _ref2;
      _ref2 = [$(this).attr("id").split("_")[1], $("#equation_string").val()], char = _ref2[0], saisie = _ref2[1];
      caractere_precedent = saisie.length > 0 ? saisie.slice(-1) : '';
      if (char === '←') {
        saisie = saisie.length < 2 ? "" : saisie.slice(0, +(saisie.length - 2) + 1 || 9e9);
      } else {
        if (caractere_precedent === '') {
          if (__indexOf.call(liste_des_operateurs, char) >= 0) {
            saisie += (char === '-' ? "(-" : "(");
          } else if (__indexOf.call(liste_des_chiffres, char) >= 0) {
            saisie += "(" + char;
          } else if (__indexOf.call(liste_des_variables, char) >= 0) {
            saisie += "(1)" + char;
          } else if (__indexOf.call(liste_des_signes, char) >= 0) {
            alert("il faut un membre à gauche !");
          } else if (char === '/') {
            alert("Impossible de commencer par ça !");
          }
        } else if (__indexOf.call(liste_des_operateurs, caractere_precedent) >= 0 || caractere_precedent === '(') {
          if (__indexOf.call(liste_des_operateurs, char) >= 0) {
            if (caractere_precedent !== '-') {
              saisie += (char === '-' ? "" + char : alert("Deux opérateurs d'affilés ?"));
            } else {
              alert("Deux fois le même opérateur ?");
            }
          } else if (__indexOf.call(liste_des_chiffres, char) >= 0) {
            saisie += "" + char;
          } else if (__indexOf.call(liste_des_variables, char) >= 0) {
            saisie += "1)" + char;
          } else if (__indexOf.call(liste_des_signes, char) >= 0) {
            alert("Effacer le dernier signe !");
          } else if (char === '/') {
            alert("Impossible d'ecrire " + caractere_precedent + char + " !");
          }
        } else if (__indexOf.call(liste_des_chiffres, caractere_precedent) >= 0) {
          if (__indexOf.call(liste_des_operateurs, char) >= 0) {
            saisie += (char === '-' ? ")+(-" : ")" + char + "(");
          } else if (__indexOf.call(liste_des_chiffres, char) >= 0) {
            saisie += "" + char;
          } else if (__indexOf.call(liste_des_variables, char) >= 0) {
            saisie += ")" + char;
          } else if (__indexOf.call(liste_des_signes, char) >= 0) {
            saisie += ")" + char;
          } else if (char === '/') {
            saisie += "" + char;
          }
        } else if (__indexOf.call(liste_des_variables, caractere_precedent) >= 0) {
          if (__indexOf.call(liste_des_operateurs, char) >= 0) {
            saisie += (char === '-' ? "+(-" : "" + char + "(");
          } else if (__indexOf.call(liste_des_chiffres, char) >= 0) {
            alert("Les coefficients se placent devant les variables !");
          } else if (__indexOf.call(liste_des_variables, char) >= 0) {
            saisie += "" + char;
          } else if (__indexOf.call(liste_des_signes, char) >= 0) {
            saisie += "" + char;
          } else if (char === '/') {
            alert("Impossible d'ecrire " + caractere_precedent + char + " !");
          }
        } else if (__indexOf.call(liste_des_signes, caractere_precedent) >= 0) {
          if (__indexOf.call(liste_des_operateurs, char) >= 0) {
            saisie += (char === '-' ? "(-" : "(");
          } else if (__indexOf.call(liste_des_chiffres, char) >= 0) {
            saisie += "(" + char;
          } else if (__indexOf.call(liste_des_variables, char) >= 0) {
            saisie += "(1)" + char;
          } else if (__indexOf.call(liste_des_signes, char) >= 0) {
            alert("_ux signes d'affilés");
          } else if (char === '/') {
            alert("Impossible d'ecrire " + caractere_precedent + char + " !");
          }
        } else if (caractere_precedent === '/') {
          if (__indexOf.call(liste_des_operateurs, char) >= 0) {
            alert("Impossible d'ecrire " + caractere_precedent + char + " !");
          } else if (__indexOf.call(liste_des_chiffres, char) >= 0) {
            saisie += "" + char;
          } else if (__indexOf.call(liste_des_variables, char) >= 0) {
            alert("Et la fraction ?");
          } else if (__indexOf.call(liste_des_signes, char) >= 0) {
            alert("Et la fraction ?");
          } else if (char === '/') {
            alert("Ca y est déjà !");
          }
        } else {
          saisie += "" + char;
        }
      }
      return $("#equation_string").val(saisie);
    });
    $("#slider-variable").slider({
      range: "max",
      min: 0,
      max: 10,
      step: 1,
      value: amount_variable,
      slide: function(event, ui) {
        return $("#amount-variable").html(amount_variable = ui.value);
      }
    });
    $("#amount-variable").html(amount_variable);
    $("#slider-facteur").slider({
      range: "max",
      min: 1,
      max: 10,
      step: 1,
      value: amount_facteur,
      slide: function(event, ui) {
        return $("#amount-facteur").html(amount_facteur = ui.value);
      }
    });
    $("#amount-facteur").html(amount_facteur);
    $("#slider-minimax").slider({
      range: "max",
      min: 1,
      max: 5,
      step: 1,
      value: amount_minimax,
      slide: function(event, ui) {
        return $("#amount-minimax").html(amount_minimax = ui.value);
      }
    });
    return $("#amount-minimax").html(amount_minimax);
  });

}).call(this);
