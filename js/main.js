// Generated by CoffeeScript 1.4.0
(function() {
  var Fraction, Monome, Operateur, activer_copier_contenu, activer_copier_symbole, ajouter_membre, changementSens, debug, fracString_to_frac, generate_equation, generate_equation_string, get_focused_id, liste_des_chiffres, liste_des_operateurs, liste_des_signes, liste_des_variables, megateuf, monomeString_to_array, multiplier_distribuer_membre, multiplier_factoriser_membre, obtenir_la_solution, operation_sur_equation, signes, unique_id,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  unique_id = 1;

  debug = false;

  activer_copier_symbole = "";

  activer_copier_contenu = {};

  liste_des_chiffres = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];

  liste_des_operateurs = ['+', '-'];

  signes = ['≤', '≤', '≥', '>', '<', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '='];

  liste_des_variables = ['x', 'y', 'z', 't'];

  liste_des_signes = ['=', '<', '>', '≤', '≥'];

  changementSens = {
    '=': '=',
    '<': '>',
    '>': '<',
    '≤': '≥',
    '≥': '≤'
  };

  fracString_to_frac = function(value) {
    var d, foo, n, _ref;
    foo = value.split("/");
    switch (foo.length) {
      case 2:
        _ref = [parseInt(foo[0]), parseInt(foo[1])], n = _ref[0], d = _ref[1];
        if ((n != null) && (d != null)) {
          return foo = new Fraction(n, d);
        } else {
          return alert("Erreur : fracString_to_frac, n is " + n + " and d is " + d + " !");
        }
        break;
      case 1:
        n = parseInt(foo[0]);
        if (n != null) {
          return foo = new Fraction(n, 1);
        } else {
          return alert("Erreur : fracString_to_frac, n is " + n + " !");
        }
        break;
      default:
        return alert("Erreur : fracString_to_frac, value is " + value + " !");
    }
  };

  Fraction = (function() {

    function Fraction(numerateur, denominateur) {
      this.numerateur = numerateur;
      this.denominateur = denominateur;
    }

    Fraction.prototype.irreductible = function() {
      var a, b, _ref, _ref1, _ref2, _ref3;
      _ref = [this.numerateur, this.denominateur], a = _ref[0], b = _ref[1];
      while (b !== 0) {
        _ref1 = [b, a % b], a = _ref1[0], b = _ref1[1];
      }
      _ref2 = [this.numerateur / a, this.denominateur / a], this.numerateur = _ref2[0], this.denominateur = _ref2[1];
      if (this.denominateur < 0) {
        _ref3 = [-this.numerateur, -this.denominateur], this.numerateur = _ref3[0], this.denominateur = _ref3[1];
      }
      return this;
    };

    Fraction.prototype.inverse = function() {
      var _ref;
      if (this.numerateur !== 0) {
        _ref = [this.denominateur, this.numerateur], this.numerateur = _ref[0], this.denominateur = _ref[1];
        return this;
      }
    };

    Fraction.prototype.oppose = function() {
      this.numerateur = -this.numerateur;
      return this;
    };

    Fraction.prototype.toString = function() {
      return "" + this.numerateur + "/" + this.denominateur;
    };

    Fraction.prototype.toHtml = function() {
      var html;
      if (this.numerateur / this.denominateur === 1) {
        return html = "<span class='plus'>&plus;</span>";
      } else if (this.numerateur / this.denominateur === -1) {
        return html = "<span class='moins'>&minus;</span>";
      } else if (this.denominateur === 1) {
        if (this.numerateur < 0) {
          return html = "<span class='moins'>&minus;</span><span class='rationnel'>" + (Math.abs(this.numerateur)) + "</span>";
        } else {
          return html = "<span class='plus'>&plus;</span><span class='rationnel'>" + this.numerateur + "</span>";
        }
      } else {
        if (this.numerateur < 0) {
          return html = "<span class='moins'>&minus;</span><span class='fraction'><span class='top'>" + (Math.abs(this.numerateur)) + "</span><span class='bottom'>" + this.denominateur + "</span></span>";
        } else {
          return html = "<span class='plus'>&plus;</span><span class='fraction'><span class='top'>" + this.numerateur + "</span><span class='bottom'>" + this.denominateur + "</span></span>";
        }
      }
    };

    Fraction.prototype.ajouter = function(fraction) {
      var _ref, _ref1;
      if (this.nominateur !== fraction.denominateur) {
        _ref = [this.numerateur * fraction.denominateur + fraction.numerateur * this.denominateur, this.denominateur * fraction.denominateur], this.numerateur = _ref[0], this.denominateur = _ref[1];
      } else {
        _ref1 = [this.numerateur + fraction.numerateur, this.denominateur], this.numerateur = _ref1[0], this.denominateur = _ref1[1];
      }
      return this;
    };

    Fraction.prototype.multiplier = function(fraction) {
      var _ref;
      _ref = [this.numerateur * fraction.numerateur, this.denominateur * fraction.denominateur], this.numerateur = _ref[0], this.denominateur = _ref[1];
      return this;
    };

    return Fraction;

  })();

  monomeString_to_array = function(s) {
    var foo, fracString, pattern_terme, symbol;
    if (debug) {
      console.log("monomeString_to_array(" + s + ")");
    }
    pattern_terme = /\(([\+\-]?\d+(?:\/\d+)*)\)(\w+)\^(\d+)*/g;
    foo = s.match(pattern_terme);
    if ((foo != null) && foo[0] === s) {
      foo = regex.exec(pattern_terme);
      fracString = foo[0].slice(1);
      symbol = foo[1];
      return foo = foo[1] ? [foo[0].slice(1)] : [foo[0].slice(1)];
    } else {
      return alert("Vous devriez effacer l'invite de commande et envisager quelquechose de mieux pondéré...ok !?");
    }
  };

  Monome = (function() {

    function Monome($monome) {
      if ($monome) {
        this.id = "#" + ($monome.attr('id'));
        this.parent_id = "#" + ($(this.id).parent().attr('id'));
        this.fraction = fracString_to_frac($(this.id).attr("data-fraction"));
        this.symbol = $(this.id).attr("data-symbol");
        this.power = parseInt($(this.id).attr("data-power"));
      } else {
        this.id = "#" + (unique_id++);
        this.power = 1;
      }
    }

    Monome.prototype.clone = function() {
      var m;
      m = new Monome();
      m.id = "#" + (unique_id++);
      m.parent_id = this.parent_id;
      m.fraction = this.fraction;
      m.symbol = this.symbol;
      m.power = this.power;
      return m;
    };

    Monome.prototype.randomize = function(symbol, power) {
      var coeff, max, min, _ref;
      this.symbol = symbol;
      this.power = power;
      _ref = [-10, 10], min = _ref[0], max = _ref[1];
      coeff = Math.floor(Math.random() * (max - min + 1)) + min;
      return this.fraction = new Fraction(coeff, 1);
    };

    Monome.prototype.update = function() {
      if (this.symbol === "1") {
        this.power = 1;
      }
      $(this.id).attr("data-fraction", this.fraction.toString());
      $(this.id).attr("data-power", this.power);
      return $(this.id).html(this.html_content());
    };

    Monome.prototype.irreductible = function() {
      this.fraction.irreductible();
      return this.update();
    };

    Monome.prototype.remove = function() {
      return $(this.id).remove();
    };

    Monome.prototype.html_content = function() {
      var html, power_div, symbol_div;
      if ((this.symbol !== "1") || (Math.abs(this.fraction.numerateur / this.fraction.denominateur) === 1)) {
        symbol_div = "<span class='symbol'>" + this.symbol + "</span>";
      } else {
        symbol_div = "";
      }
      power_div = this.power === 1 ? "" : "<sup class='power'>" + this.power + "</sup>";
      return html = "" + (this.fraction.toHtml()) + symbol_div + power_div;
    };

    Monome.prototype.insert = function(id) {
      $(id).append("<li id='" + this.id.slice(1) + "' class='monome item' data-fraction='" + this.fraction + "' data-symbol='" + this.symbol + "'  data-power='" + this.power + "'></li>");
      return this.update();
    };

    Monome.prototype.insert_from_string = function(equation_id, monomeString) {
      var m, _ref, _ref1;
      this.equation_id = equation_id;
      m = monomeString.split(".");
      this.fraction = fracString_to_frac(m[0]);
      alert(this.fraction);
      if (m.length > 1) {
        m = m[1].split("^");
        _ref = [m[0], m[1]], this.symbol = _ref[0], this.power = _ref[1];
      } else {
        _ref1 = [1, 1], this.symbol = _ref1[0], this.power = _ref1[1];
      }
      return (new Monome()).insert(this.equation_id);
    };

    Monome.prototype.ajouter = function(monome) {
      if (this.symbol === monome.symbol) {
        this.fraction.ajouter(monome.fraction);
      } else {
        alert("On ne mélange pas symboles & chiffres !");
      }
      return this;
    };

    Monome.prototype.toString = function() {
      return "" + (this.fraction.toString()) + "." + this.symbol + "^" + this.power;
    };

    Monome.prototype.toArray = function() {
      return monomeString_to_array(this.toString());
    };

    Monome.prototype.toHtml = function() {
      var html;
      return html = "<li id='" + this.id.slice(1) + "' class='monome item' data-fraction='" + (this.fraction.toString()) + "' data-symbol='" + this.symbol + "' data-power='" + this.power + "'><span class='monome_html'>" + (this.html_content()) + "</span></li>";
    };

    return Monome;

  })();

  Operateur = (function() {

    function Operateur(id, symbol, membre) {
      var classe, html;
      this.symbol = symbol;
      classe = {
        "*": "multiplication",
        "+": "addition"
      };
      if (this.symbol != null) {
        this.type = classe[this.symbol];
        this.id = unique_id++;
        html = "<ul id='" + this.id + "' class='operateur " + this.type + " item' data-symbol='" + this.symbol + "'></ul>";
        this.id = "#" + this.id;
        switch ($(id).attr("data-symbol")) {
          case this.symbol:
            $(id).append(html);
            break;
          default:
            $(id).wrap(html);
        }
      } else {
        this.id = id;
        this.symbol = $(this.id).attr("data-symbol");
        this.type = classe[this.symbol];
      }
      this.parent_id = "#" + ($(this.id).parent().attr('id'));
      this.update();
    }

    Operateur.prototype.update = function() {
      return this;
    };

    Operateur.prototype.monome_insert = function(monome) {
      return (new Monome()).insert(this.id);
    };

    Operateur.prototype.monomesString_insert = function(membre) {
      var monomeString, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = membre.length; _i < _len; _i++) {
        monomeString = membre[_i];
        _results.push((new Monome()).insert_from_string(this.id, monomeString));
      }
      return _results;
    };

    Operateur.prototype.toString = function() {
      var s, string;
      s = this.symbol;
      string = "";
      $(this.id).children().each(function() {
        var m;
        if ($(this).is("ul")) {
          return string += "operateur";
        } else {
          m = new Monome($(this));
          return string += "" + s + (m.toString());
        }
      });
      return string.slice(1);
    };

    return Operateur;

  })();

  megateuf = function() {
    $("ul.operateur").each(function() {
      if (($(this).children().length === 1) && ((!$(this).parent().hasClass("equation")) || ($(this).siblings().length > 0))) {
        return $(this).contents().unwrap();
      } else if ($(this).attr("data-symbol") === $(this).parent().attr("data-symbol")) {
        return $(this).contents().unwrap();
      }
    });
    return $("ul.operateur").each(function() {
      var op;
      op = new Operateur("#" + ($(this).attr('id')));
      $("" + op.id + " > li.monome").droppable({
        accept: "" + op.id + " > li.monome",
        hoverClass: "state-hover",
        activeClass: "li-state-active",
        drop: function(event, ui) {
          var m1, m2;
          event.stopImmediatePropagation();
          console.log("woot");
          m1 = new Monome(ui.draggable);
          m2 = new Monome($(this));
          switch (op.type) {
            case "addition":
              if ((m1.symbol === m2.symbol) && (m1.power === m2.power)) {
                m2.fraction.ajouter(m1.fraction);
                m2.update();
                m1.remove();
              } else {
                if (m1.power !== m2.power) {
                  alert("attention, ce n'est pas la meme puissance !");
                } else {
                  alert("On ne peut pas tout mélanger !");
                }
              }
              break;
            case "multiplication":
              if (m1.symbol === m2.symbol) {
                m2.fraction.multiplier(m1.fraction);
                m2.power += 1;
                m2.update();
                m1.remove();
              } else if (m2.symbol === "1") {
                m1.fraction.multiplier(m2.fraction);
                m1.update();
                m2.remove();
              } else if (m1.symbol === "1") {
                m2.fraction.multiplier(m1.fraction);
                m2.update();
                m1.remove();
              } else {
                m2.fraction.multiplier(m1.fraction);
                m1.fraction = new Fraction(1, 1);
                m2.update();
                m1.update();
              }
          }
          return megateuf();
        }
      });
      $("" + op.id + " > ul.operateur").droppable({
        accept: "" + op.id + " > li.monome, " + op.id + " > ul.operateur",
        hoverClass: "state-hover",
        activeClass: "ul-state-active",
        drop: function(event, ui) {
          var m, m2, m3, match2, match3, op2, op3, regex, str2, str3;
          console.log("webeet1");
          op2 = new Operateur("#" + ($(this).attr('id')));
          if (ui.draggable.is("ul")) {
            op3 = new Operateur("#" + (ui.draggable.attr('id')));
            console.log("webeet2 : " + op3.type);
            switch (op3.type) {
              case "multiplication":
                str2 = op2.toString();
                str3 = op3.toString();
                console.log("webeet3");
                regex = /([+-]?\d+(?:\/\d+)?)[.](.*)/;
                match2 = regex.exec(str2);
                match3 = regex.exec(str3);
                console.log("" + match2[2] + " is " + match3[2]);
                if (match2.length === 3 && match2[2] === match3[2]) {
                  console.log("webeet3");
                  m2 = new Monome($(op2.id).children("li:first"));
                  m3 = new Monome($(op3.id).children("li:first"));
                  m2.fraction.ajouter(m3.fraction);
                  $(op3.id).remove();
                  m2.update();
                }
            }
          } else {
            m = new Monome(ui.draggable);
            op2 = new Operateur("#" + ($(this).attr('id')));
            switch (op.type) {
              case op2.type:
                $(op2.id).append($(m.id));
                break;
              case "addition":
                if (op2.type === "multiplication") {
                  op3 = new Operateur(op2.id, op.symbol);
                  m.clone().insert(op3.id);
                  $(m.id).remove();
                }
                break;
              case "multiplication":
                if (op2.type === "addition") {
                  $(op2.id).children("ul, li").each(function() {
                    op3 = new Operateur("#" + ($(this).attr('id')), op.symbol);
                    return m.clone().insert(op3.id);
                  });
                  $(m.id).remove();
                }
            }
          }
          return megateuf();
        }
      });
      return $("ul.operateur, li.monome").draggable({
        revert: true
      });
    });
  };

  generate_equation_string = function(n, min, max) {
    var coeff, equation, side, str, toss, _i, _j, _len, _ref;
    if (min == null) {
      min = -10;
    }
    if (max == null) {
      max = 10;
    }
    equation = {};
    equation["signe"] = signes[Math.floor(Math.random() * signes.length)];
    _ref = ["gauche", "droite"];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      side = _ref[_i];
      str = "";
      for (_j = 1; 1 <= n ? _j <= n : _j >= n; 1 <= n ? _j++ : _j--) {
        coeff = Math.floor(Math.random() * (max - min + 1)) + min;
        toss = Math.floor(Math.random() * 2.) - 1;
        str += toss === 0 ? "+(" + coeff + ")1" : "+(" + coeff + ")x ";
      }
      equation[side] = str.slice(1);
    }
    return equation = "" + equation['gauche'] + " " + equation['signe'] + " " + equation['droite'];
  };

  generate_equation = function(unknown, factor_length, depth, min, max) {
    var alphabet, create_equation_membre, html, id, signe, _base, _ref;
    if (unknown == null) {
      unknown = 2;
    }
    if (factor_length == null) {
      factor_length = 2;
    }
    if (depth == null) {
      depth = 2;
    }
    if (min == null) {
      min = -10;
    }
    if (max == null) {
      max = 10;
    }
    id = unique_id++;
    signe = signes[Math.floor(Math.random() * signes.length)];
    html = "<div id='equation_" + id + "' class='equation' >\n    <button id='deleteButton_" + id + "' class='deleteButton' title='Supprimer cette équation'>x</button>    \n    <p id='solution_" + id + "'></p>\n    <ul id='fake' data-symbol=\"*\"></ul>\n    <span id='signe_" + id + "' class='signe'>" + signe + "</span>\n</div>";
    $("#equations_div").append(html);
    if ((_ref = (_base = Array.prototype).shuffle) == null) {
      _base.shuffle = function() {
        var i, j, _i, _ref1, _ref2;
        if (this.length > 1) {
          for (i = _i = _ref1 = this.length - 1; _ref1 <= 1 ? _i <= 1 : _i >= 1; i = _ref1 <= 1 ? ++_i : --_i) {
            j = Math.floor(Math.random() * (i + 1));
            _ref2 = [this[j], this[i]], this[i] = _ref2[0], this[j] = _ref2[1];
            return this;
          }
        }
      };
    }
    alphabet = ['1', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'].slice(0, +unknown + 1 || 9e9).shuffle();
    console.log(alphabet);
    create_equation_membre = function() {
      var j, m, op, operateur, _i, _j;
      operateur = new Operateur("#fake", "+");
      $(operateur.id).append($("#fake"));
      for (j = _i = 1; 1 <= factor_length ? _i <= factor_length : _i >= factor_length; j = 1 <= factor_length ? ++_i : --_i) {
        op = new Operateur("#fake", "+");
        for (j = _j = 1; 1 <= unknown ? _j <= unknown : _j >= unknown; j = 1 <= unknown ? ++_j : --_j) {
          m = new Monome();
          m.randomize((alphabet.shuffle())[j], 1);
          m.insert(op.id);
        }
        $(operateur.id).append($("#fake"));
      }
      $("#fake").remove();
      return $(operateur.id).find("ul").each(function() {
        var _k, _results;
        op = new Operateur("#" + ($(this).attr('id')), "*");
        _results = [];
        for (j = _k = 1; 1 <= factor_length ? _k <= factor_length : _k >= factor_length; j = 1 <= factor_length ? ++_k : --_k) {
          m = new Monome();
          m.randomize((alphabet.shuffle())[j], 1);
          _results.push(m.insert(op.id));
        }
        return _results;
      });
    };
    create_equation_membre();
    $("#equation_" + id).append("<ul id='fake' data-symbol='*'></ul>");
    create_equation_membre();
    return megateuf();
  };

  obtenir_la_solution = function(id) {
    var $li_droite, $li_gauche, s, signe, solution, _ref;
    if ($("#equation_" + id + " > ul.membre.gauche > li").length === 1 && $("#equation_" + id + " > ul.membre.droite > li").length === 1) {
      $li_gauche = $("#equation_" + id + " > ul.membre.gauche > li");
      $li_droite = $("#equation_" + id + " > ul.membre.droite > li");
      if ($li_gauche.attr("data-symbol") && !$li_droite.attr("data-symbol")) {
        if ($li_gauche.attr("data-fraction") === "1/1" || $li_gauche.attr("data-fraction") === "1") {
          _ref = [$("#signe_" + id).text(), fracString_to_frac($li_droite.attr("data-fraction")).irreductible().toHtml()], signe = _ref[0], s = _ref[1];
          switch (signe) {
            case "=":
              solution = "S = {" + s + "}";
              break;
            case ">":
              solution = "S = ]" + s + " ; +∞ [";
              break;
            case "≥":
              solution = "S = [" + s + " ; +∞ [";
              break;
            case "<":
              solution = "S = ] -∞ ; " + s + "]";
              break;
            case "≤":
              solution = "S = ] -∞ ; " + s + "]";
          }
          return $("#solution_" + id).html(solution);
        } else {
          return alert("On ne peut pas encore lire la solution ! il faut que le coefficient _ l'inconnue soit 1.");
        }
      } else {
        return alert("On ne peut pas encore lire la solution ! il faut une l'inconnue à gauche et une valeur à droite.");
      }
    } else {
      return alert("On ne peut pas encore lire la solution ! il faut un seul terme à gauche et un seul terme à droite.");
    }
  };

  ajouter_membre = function(string) {
    var id;
    id = get_focused_id();
    if (id) {
      return $("#equation_" + id + " > .operateur").each(function() {
        var operateur;
        return (operateur = new Operateur("#" + ($(this).attr('id')), "+")).monomesString_insert(string);
      });
    }
  };

  multiplier_distribuer_membre = function(facteur) {
    var id;
    id = get_focused_id();
    if (id && facteur.denominateur) {
      return $("#equation_" + id + " > ul > li.monome").each(function() {
        var m;
        m = new Monome($(this));
        m.fraction.multiplier(facteur);
        return m.update();
      });
    }
  };

  multiplier_factoriser_membre = function(string) {
    var id;
    id = get_focused_id();
    if (id) {
      return $("#equation_" + id + " > .operateur").each(function() {
        var operateur;
        return (operateur = new Operateur("#" + ($(this).attr('id')), "*")).monomesString_insert(string);
      });
    }
  };

  get_focused_id = function() {
    var id;
    return id = $(".focus").attr("id") ? $(".focus").attr("id").split("_")[1] : alert("Selectionner une équation !");
  };

  operation_sur_equation = function(mode, id) {
    var array, _ref;
    if (_ref = $("#equation_string").val().slice(-1), __indexOf.call(liste_des_chiffres, _ref) >= 0) {
      $("#equation_string").val("" + ($('#equation_string').val()) + ")");
    }
    id = get_focused_id();
    array = monomeString_to_array($("#equation_string").val());
    if ((id != null) && (array != null)) {
      switch (mode) {
        case "diviser":
          return multiplier_distribuer_membre(fracString_to_frac(array[0], array[1]));
        case "multiplier_factoriser":
          return multiplier_factoriser_membre($("#equation_string").val().split("+"));
        case "multiplier_distribuer":
          return multiplier_distribuer_membre(fracString_to_frac(array[0], array[1]));
        case "retrancher":
          return ajouter_membre((fracString_to_frac(array[0])).oppose(), array[1]);
        case "ajouter":
          return ajouter_membre($("#equation_string").val().split("+"));
      }
    } else {
      return alert("Poids surement mal formé !");
    }
  };

  $(function() {
    var char, monome_irreductible, once, _i, _j, _len, _len1, _ref;
    $("#generer_equation_complexe").on("click", function() {
      return generate_equation(2, 2, 2, -10, 10);
    });
    (once = function() {
      return $("#toggle_help").on("click", function() {
        return $("#help, #aside, #footer").toggle();
      });
    })();
    $(".operateur").on("click", function() {
      if (($(this).children().length < 2) || ($(this).attr('data-symbol') === $(this).parent().attr('data-symbol'))) {
        return $(this).unwrap();
      }
    });
    $("#generer_equation").on("click", function() {
      return $("#equation_string").val(generate_equation_string(Math.floor(10 * Math.random()) + 1));
    });
    $("#inserer_equation").on("click", function() {
      var html, id, match, mdd, mdg, operateur, pattern_equation, s, signe, _ref, _ref1;
      s = $("#equation_string").val();
      if ((_ref = s.slice(-1), __indexOf.call(liste_des_chiffres, _ref) >= 0)) {
        $("#equation_string").val("" + s + ")");
      }
      s = $("#equation_string").val().replace(/\s+/g, '');
      pattern_equation = /((?:\([\+\-]*\d+[\/\d+]*\)(?:\w+²?)*)(?:\+(?:\([\+\-]*\d+[\/\d+]*\)(?:\w+²?)*))*)([<≤=≥>])((?:\([\+\-]*\d+[\/\d+]*\)(?:\w+²?)*)(?:\+(?:\([\+\-]*\d+[\/\d+]*\)(?:\w+²?)*))*)/g;
      switch ((match = pattern_equation.exec(s)).length) {
        case 0:
          return alert("Vérifier que l'équation est correctement formatée");
        default:
          _ref1 = [match[2], match[1].split("+"), match[3].split("+"), unique_id++], signe = _ref1[0], mdg = _ref1[1], mdd = _ref1[2], id = _ref1[3];
          html = "<div id='equation_" + id + "' class='equation' >\n    <button id='deleteButton_" + id + "' class='deleteButton' title='Supprimer cette équation'>x</button>    \n    <p id='solution_" + id + "'></p>\n    <ul id='fakeg'></ul>\n    <span id='signe_" + id + "' class='signe'>" + signe + "</span>\n    <ul id='faked'></ul>\n</div>";
          $("#equations_div").append(html);
          (operateur = new Operateur("#fakeg", "+")).monomesString_insert(mdg);
          (operateur = new Operateur("#faked", "+")).monomesString_insert(mdd);
          $("#fakeg, #faked").remove();
          return $("#equation_" + id).trigger("click");
      }
    });
    $("#effacer_equation_string").on("click", function() {
      return $("#equation_string").val("");
    });
    $("body").on("click", ".selectAllButton", function(event) {
      var id;
      if (id = get_focused_id()) {
        return $("#equation_" + id + ".focus ul > .monome").addClass("selected");
      }
    });
    monome_irreductible = function($monome) {
      var m;
      return (m = new Monome($monome)).irreductible();
    };
    $("body").on("dblclick", ".monome", function() {
      return monome_irreductible($(this));
    });
    $("body").on("click", ".simplifier_les_monomes", function() {
      var id;
      if (id = get_focused_id()) {
        return $("#equation_" + id + " > ul > li.selected").each(function() {
          return monome_irreductible($(this));
        });
      }
    });
    $('body').on("click", "li", function(event) {
      var m, op, zero, _ref;
      m = new Monome($(this));
      op = new Operateur(m.parent_id);
      switch (op.type) {
        case "addition":
          if (m.fraction.numerateur === 0) {
            switch ($("" + m.id).siblings().length) {
              case 0:
                m.fraction.numerateur;
                m.update();
                break;
              default:
                $("" + m.id).remove();
            }
          }
          break;
        case "multiplication":
          switch (m.fraction.numerateur / m.fraction.denominateur) {
            case 1:
              switch ($("" + m.id).siblings().length) {
                case 0:
                  m.fraction.numerateur = 1;
                  m.update();
                  break;
                default:
                  if (m.symbol === "1") {
                    $("" + m.id).remove();
                  }
              }
              break;
            case 0:
              $(op.id).empty();
              zero = new Monome();
              _ref = ["1", new Fraction(0, 1)], zero.symbol = _ref[0], zero.fraction = _ref[1];
              zero.insert(op.id);
          }
      }
      $("#equation_string").val(m.toString());
      return megateuf();
    });
    $('body').on("dblclick", "ul", function(event) {
      var index, op, symbols, _ref;
      Array.prototype.unique = function() {
        var key, output, value, _i, _ref, _results;
        output = {};
        for (key = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; key = 0 <= _ref ? ++_i : --_i) {
          output[this[key]] = this[key];
        }
        _results = [];
        for (key in output) {
          value = output[key];
          _results.push(value);
        }
        return _results;
      };
      op = new Operateur("#" + ($(this).attr('id')));
      switch ($(op.id).children("ul").length) {
        case 0:
          switch (op.type) {
            case "multiplication":
              _ref = [{}, []], index = _ref[0], symbols = _ref[1];
              index["1"] = new Fraction(1, 1);
              $(op.id).children().each(function() {
                var current;
                current = new Monome($(this));
                if (current.symbol !== "1") {
                  index[current.symbol] = (index[current.symbol] != null) ? current.power + index[current.symbol] : current.power;
                }
                return index["1"] = current.fraction.multiplier(index["1"]);
              });
              console.log(index);
              $(op.id).empty();
              return Object.keys(index).sort().forEach(function(symbol, i) {
                var m;
                m = new Monome();
                m.symbol = symbol;
                if (symbol === "1") {
                  m.fraction = index["1"];
                } else {
                  m.fraction = new Fraction(1, 1);
                  m.power = index[symbol];
                }
                return m.insert(op.id);
              });
          }
      }
    });
    _ref = liste_des_variables.concat(liste_des_operateurs.concat(["/"].concat(liste_des_signes)));
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      char = _ref[_i];
      $("#equation_panel").append("<button id='var_" + char + "' class='panel_touch'>" + char + "</button>");
    }
    for (_j = 0, _len1 = liste_des_chiffres.length; _j < _len1; _j++) {
      char = liste_des_chiffres[_j];
      $("#equation_panel").append("<button id='var_" + char + "' class='panel_touch'>" + char + "</button>");
    }
    $("button").button();
    $('body').on("click", ".panel_touch", function() {
      var caractere_precedent, saisie, _ref1;
      _ref1 = [$(this).attr("id").split("_")[1], $("#equation_string").val()], char = _ref1[0], saisie = _ref1[1];
      caractere_precedent = saisie.length > 0 ? saisie.slice(-1) : '';
      if (char === '←') {
        saisie = saisie.length < 2 ? "" : saisie.slice(0, +(saisie.length - 2) + 1 || 9e9);
      } else {
        if (caractere_precedent === '') {
          if (__indexOf.call(liste_des_operateurs, char) >= 0) {
            saisie += (char === '-' ? "(-" : "(");
          } else if (__indexOf.call(liste_des_chiffres, char) >= 0) {
            saisie += "(" + char;
          } else if (__indexOf.call(liste_des_variables, char) >= 0) {
            saisie += "(1)" + char;
          } else if (__indexOf.call(liste_des_signes, char) >= 0) {
            alert("il faut un membre à gauche !");
          } else if (char === '/') {
            alert("Impossible de commencer par ça !");
          }
        } else if (__indexOf.call(liste_des_operateurs, caractere_precedent) >= 0 || caractere_precedent === '(') {
          if (__indexOf.call(liste_des_operateurs, char) >= 0) {
            if (caractere_precedent !== '-') {
              saisie += (char === '-' ? "" + char : alert("Deux opérateurs d'affilés ?"));
            } else {
              alert("Deux fois le même opérateur ?");
            }
          } else if (__indexOf.call(liste_des_chiffres, char) >= 0) {
            saisie += "" + char;
          } else if (__indexOf.call(liste_des_variables, char) >= 0) {
            saisie += "1)" + char;
          } else if (__indexOf.call(liste_des_signes, char) >= 0) {
            alert("Effacer le dernier signe !");
          } else if (char === '/') {
            alert("Impossible d'ecrire " + caractere_precedent + char + " !");
          }
        } else if (__indexOf.call(liste_des_chiffres, caractere_precedent) >= 0) {
          if (__indexOf.call(liste_des_operateurs, char) >= 0) {
            saisie += (char === '-' ? ")+(-" : ")" + char + "(");
          } else if (__indexOf.call(liste_des_chiffres, char) >= 0) {
            saisie += "" + char;
          } else if (__indexOf.call(liste_des_variables, char) >= 0) {
            saisie += ")" + char;
          } else if (__indexOf.call(liste_des_signes, char) >= 0) {
            saisie += ")" + char;
          } else if (char === '/') {
            saisie += "" + char;
          }
        } else if (__indexOf.call(liste_des_variables, caractere_precedent) >= 0) {
          if (__indexOf.call(liste_des_operateurs, char) >= 0) {
            saisie += (char === '-' ? "+(-" : "" + char + "(");
          } else if (__indexOf.call(liste_des_chiffres, char) >= 0) {
            alert("Les coefficients se placent devant les variables !");
          } else if (__indexOf.call(liste_des_variables, char) >= 0) {
            saisie += "" + char;
          } else if (__indexOf.call(liste_des_signes, char) >= 0) {
            saisie += "" + char;
          } else if (char === '/') {
            alert("Impossible d'ecrire " + caractere_precedent + char + " !");
          }
        } else if (__indexOf.call(liste_des_signes, caractere_precedent) >= 0) {
          if (__indexOf.call(liste_des_operateurs, char) >= 0) {
            saisie += (char === '-' ? "(-" : "(");
          } else if (__indexOf.call(liste_des_chiffres, char) >= 0) {
            saisie += "(" + char;
          } else if (__indexOf.call(liste_des_variables, char) >= 0) {
            saisie += "(1)" + char;
          } else if (__indexOf.call(liste_des_signes, char) >= 0) {
            alert("_ux signes d'affilés");
          } else if (char === '/') {
            alert("Impossible d'ecrire " + caractere_precedent + char + " !");
          }
        } else if (caractere_precedent === '/') {
          if (__indexOf.call(liste_des_operateurs, char) >= 0) {
            alert("Impossible d'ecrire " + caractere_precedent + char + " !");
          } else if (__indexOf.call(liste_des_chiffres, char) >= 0) {
            saisie += "" + char;
          } else if (__indexOf.call(liste_des_variables, char) >= 0) {
            alert("Et la fraction ?");
          } else if (__indexOf.call(liste_des_signes, char) >= 0) {
            alert("Et la fraction ?");
          } else if (char === '/') {
            alert("Ca y est déjà !");
          }
        } else {
          saisie += "" + char;
        }
      }
      return $("#equation_string").val(saisie);
    });
    return $("body").on("click", ".deleteButton", function(event) {
      event.stopPropagation();
      $("body").append($("#equation_panel"));
      return $(this).parent().hide('easeInElastic', function() {
        return $(this).remove();
      });
    });
  });

}).call(this);
